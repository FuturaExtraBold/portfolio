{"version":3,"file":"static/js/164.3fce9cde.chunk.js","mappings":"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","sources":["../node_modules/pixi.js/src/rendering/renderers/shared/renderTarget/RenderTarget.ts","../node_modules/pixi.js/src/rendering/high-shader/shader-bits/localUniformBit.ts","../node_modules/pixi.js/src/scene/sprite/BatchableSprite.ts","../node_modules/pixi.js/src/rendering/high-shader/shader-bits/textureBit.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/program/ensureAttributes.ts","../node_modules/pixi.js/src/rendering/renderers/shared/texture/utils/getCanvasTexture.ts","../node_modules/pixi.js/src/rendering/renderers/shared/shader/utils/uboSyncFunctions.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/state/GpuStencilModesToPixi.ts","../node_modules/pixi.js/src/rendering/renderers/shared/renderTarget/RenderTargetSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/renderTarget/isRenderingToScreen.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/renderTarget/calculateProjection.ts","../node_modules/pixi.js/src/rendering/renderers/shared/shader/utils/createUboSyncFunction.ts","../node_modules/pixi.js/src/rendering/renderers/shared/shader/utils/uniformParsers.ts","../node_modules/pixi.js/src/rendering/renderers/shared/shader/UboSystem.ts","../node_modules/pixi.js/src/scene/graphics/gpu/colorToUniform.ts","../node_modules/pixi.js/src/rendering/renderers/shared/buffer/BufferResource.ts","../node_modules/pixi.js/src/scene/container/CustomRenderPipe.ts","../node_modules/pixi.js/src/scene/container/utils/executeInstructions.ts","../node_modules/pixi.js/src/scene/container/RenderGroupPipe.ts","../node_modules/pixi.js/src/scene/container/utils/clearList.ts","../node_modules/pixi.js/src/scene/container/utils/updateRenderGroupTransforms.ts","../node_modules/pixi.js/src/scene/container/RenderGroupSystem.ts","../node_modules/pixi.js/src/scene/container/utils/validateRenderables.ts","../node_modules/pixi.js/src/scene/sprite/SpritePipe.ts","../node_modules/pixi.js/src/rendering/batcher/shared/BatcherPipe.ts","../node_modules/pixi.js/src/filters/mask/MaskFilter.ts","../node_modules/pixi.js/src/rendering/mask/alpha/AlphaMaskPipe.ts","../node_modules/pixi.js/src/rendering/mask/color/ColorMaskPipe.ts","../node_modules/pixi.js/src/rendering/mask/stencil/StencilMaskPipe.ts","../node_modules/pixi.js/src/rendering/renderers/shared/background/BackgroundSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/blendModes/BlendModePipe.ts","../node_modules/pixi.js/src/rendering/renderers/shared/extract/ExtractSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/texture/RenderTexture.ts","../node_modules/pixi.js/src/rendering/renderers/shared/extract/GenerateTextureSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/renderTarget/GlobalUniformSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/SchedulerSystem.ts","../node_modules/pixi.js/src/utils/sayHello.ts","../node_modules/pixi.js/src/rendering/renderers/shared/startup/HelloSystem.ts","../node_modules/pixi.js/src/utils/data/clean.ts","../node_modules/pixi.js/src/rendering/renderers/shared/texture/RenderableGCSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/texture/TextureGCSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/view/ViewSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/system/SharedSystems.ts"],"sourcesContent":["// what we are building is a platform and a framework.\n// import { Matrix } from '../../shared/maths/Matrix';\nimport { uid } from '../../../../utils/data/uid';\nimport { TextureSource } from '../texture/sources/TextureSource';\nimport { Texture } from '../texture/Texture';\n\nimport type { BindableTexture } from '../texture/Texture';\n\n/**\n * Options for creating a render target.\n * @memberof rendering\n */\nexport interface RenderTargetOptions\n{\n    /** the width of the RenderTarget */\n    width?: number;\n    /** the height of the RenderTarget */\n    height?: number;\n    /** the resolution of the RenderTarget */\n    resolution?: number;\n    /** an array of textures, or a number indicating how many color textures there should be */\n    colorTextures?: BindableTexture[] | number;\n    /** should this render target have a stencil buffer? */\n    stencil?: boolean;\n    /** should this render target have a depth buffer? */\n    depth?: boolean;\n    /** a depth stencil texture that the depth and stencil outputs will be written to */\n    depthStencilTexture?: BindableTexture | boolean;\n    /** should this render target be antialiased? */\n    antialias?: boolean;\n    /** is this a root element, true if this is gl context owners render target */\n    isRoot?: boolean;\n}\n\n/**\n * A class that describes what the renderers are rendering to.\n * This can be as simple as a Texture, or as complex as a multi-texture, multi-sampled render target.\n * Support for stencil and depth buffers is also included.\n *\n * If you need something more complex than a Texture to render to, you should use this class.\n * Under the hood, all textures you render to have a RenderTarget created on their behalf.\n * @memberof rendering\n */\nexport class RenderTarget\n{\n    /** The default options for a render target */\n    public static defaultOptions: RenderTargetOptions = {\n        /** the width of the RenderTarget */\n        width: 0,\n        /** the height of the RenderTarget */\n        height: 0,\n        /** the resolution of the RenderTarget */\n        resolution: 1,\n        /** an array of textures, or a number indicating how many color textures there should be */\n        colorTextures: 1,\n        /** should this render target have a stencil buffer? */\n        stencil: false,\n        /** should this render target have a depth buffer? */\n        depth: false,\n        /** should this render target be antialiased? */\n        antialias: false, // save on perf by default!\n        /** is this a root element, true if this is gl context owners render target */\n        isRoot: false\n    };\n\n    /** unique id for this render target */\n    public readonly uid: number = uid('renderTarget');\n\n    /**\n     * An array of textures that can be written to by the GPU - mostly this has one texture in Pixi, but you could\n     * write to multiple if required! (eg deferred lighting)\n     */\n    public colorTextures: TextureSource[] = [];\n    /** the stencil and depth buffer will right to this texture in WebGPU */\n    public depthStencilTexture: TextureSource;\n    /** if true, will ensure a stencil buffer is added. For WebGPU, this will automatically create a depthStencilTexture */\n    public stencil: boolean;\n    /** if true, will ensure a depth buffer is added. For WebGPU, this will automatically create a depthStencilTexture */\n    public depth: boolean;\n\n    public dirtyId = 0;\n    public isRoot = false;\n\n    private readonly _size = new Float32Array(2);\n    /** if true, then when the render target is destroyed, it will destroy all the textures that were created for it. */\n    private readonly _managedColorTextures: boolean = false;\n\n    /**\n     * @param [descriptor] - Options for creating a render target.\n     */\n    constructor(descriptor: RenderTargetOptions = {})\n    {\n        descriptor = { ...RenderTarget.defaultOptions, ...descriptor };\n\n        this.stencil = descriptor.stencil;\n        this.depth = descriptor.depth;\n        this.isRoot = descriptor.isRoot;\n\n        if (typeof descriptor.colorTextures === 'number')\n        {\n            this._managedColorTextures = true;\n\n            for (let i = 0; i < descriptor.colorTextures; i++)\n            {\n                this.colorTextures.push(new TextureSource({\n                    width: descriptor.width,\n                    height: descriptor.height,\n                    resolution: descriptor.resolution,\n                    antialias: descriptor.antialias,\n                })\n                );\n            }\n        }\n        else\n        {\n            this.colorTextures = [...descriptor.colorTextures.map((texture) => texture.source)];\n\n            const colorSource = this.colorTexture.source;\n\n            this.resize(colorSource.width, colorSource.height, colorSource._resolution);\n        }\n\n        // the first color texture drives the size of all others..\n        this.colorTexture.source.on('resize', this.onSourceResize, this);\n\n        // TODO should listen for texture destroyed?\n\n        if (descriptor.depthStencilTexture || this.stencil)\n        {\n            // TODO add a test\n            if (descriptor.depthStencilTexture instanceof Texture\n                || descriptor.depthStencilTexture instanceof TextureSource)\n            {\n                this.depthStencilTexture = descriptor.depthStencilTexture.source;\n            }\n            else\n            {\n                this.ensureDepthStencilTexture();\n            }\n        }\n    }\n\n    get size(): [number, number]\n    {\n        const _size = this._size;\n\n        _size[0] = this.pixelWidth;\n        _size[1] = this.pixelHeight;\n\n        return _size as any as [number, number];\n    }\n\n    get width(): number\n    {\n        return this.colorTexture.source.width;\n    }\n\n    get height(): number\n    {\n        return this.colorTexture.source.height;\n    }\n    get pixelWidth(): number\n    {\n        return this.colorTexture.source.pixelWidth;\n    }\n\n    get pixelHeight(): number\n    {\n        return this.colorTexture.source.pixelHeight;\n    }\n\n    get resolution(): number\n    {\n        return this.colorTexture.source._resolution;\n    }\n\n    get colorTexture(): TextureSource\n    {\n        return this.colorTextures[0];\n    }\n\n    protected onSourceResize(source: TextureSource)\n    {\n        this.resize(source.width, source.height, source._resolution, true);\n    }\n\n    /**\n     * This will ensure a depthStencil texture is created for this render target.\n     * Most likely called by the mask system to make sure we have stencil buffer added.\n     * @internal\n     * @ignore\n     */\n    public ensureDepthStencilTexture()\n    {\n        if (!this.depthStencilTexture)\n        {\n            this.depthStencilTexture = new TextureSource({\n                width: this.width,\n                height: this.height,\n                resolution: this.resolution,\n                format: 'depth24plus-stencil8',\n                autoGenerateMipmaps: false,\n                antialias: false,\n                mipLevelCount: 1,\n                // sampleCount: handled by the render target system..\n            });\n        }\n    }\n\n    public resize(width: number, height: number, resolution = this.resolution, skipColorTexture = false)\n    {\n        this.dirtyId++;\n\n        this.colorTextures.forEach((colorTexture, i) =>\n        {\n            if (skipColorTexture && i === 0) return;\n\n            colorTexture.source.resize(width, height, resolution);\n        });\n\n        if (this.depthStencilTexture)\n        {\n            this.depthStencilTexture.source.resize(width, height, resolution);\n        }\n    }\n\n    public destroy()\n    {\n        this.colorTexture.source.off('resize', this.onSourceResize, this);\n\n        if (this._managedColorTextures)\n        {\n            this.colorTextures.forEach((texture) =>\n            {\n                texture.destroy();\n            });\n        }\n\n        if (this.depthStencilTexture)\n        {\n            this.depthStencilTexture.destroy();\n            delete this.depthStencilTexture;\n        }\n    }\n}\n","export const localUniformBit = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* wgsl */`\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `,\n        main: /* wgsl */`\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `,\n        end: /* wgsl */`\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    },\n};\n\n// TODO this works, but i think down the road it will be better to manage groups automatically if there are clashes\nexport const localUniformBitGroup2 = {\n    ...localUniformBit,\n    vertex: {\n        ...localUniformBit.vertex,\n        // replace the group!\n        header: localUniformBit.vertex.header.replace('group(1)', 'group(2)'),\n    }\n};\n\nexport const localUniformBitGl = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* glsl */`\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `,\n        main: /* glsl */`\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        `,\n        end: /* glsl */`\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    },\n};\n","import type { Matrix } from '../../maths/matrix/Matrix';\nimport type { Batch, Batcher } from '../../rendering/batcher/shared/Batcher';\nimport type { DefaultBatchableQuadElement } from '../../rendering/batcher/shared/DefaultBatcher';\nimport type { Topology } from '../../rendering/renderers/shared/geometry/const';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { BoundsData } from '../container/bounds/Bounds';\nimport type { Container } from '../container/Container';\n\n/**\n * A batchable sprite object.\n * @ignore\n */\nexport class BatchableSprite implements DefaultBatchableQuadElement\n{\n    public batcherName = 'default';\n    public topology: Topology = 'triangle-list';\n\n    // batch specific..\n    public readonly attributeSize = 4;\n    public readonly indexSize = 6;\n    public readonly packAsQuad = true;\n\n    public transform: Matrix;\n\n    public renderable: Container;\n    public texture: Texture;\n    public bounds: BoundsData;\n\n    public roundPixels: 0 | 1 = 0;\n\n    public _indexStart: number;\n    public _textureId: number;\n    public _attributeStart = 0; // location in the buffer\n    public _batcher: Batcher = null;\n    public _batch: Batch = null;\n\n    get blendMode() { return this.renderable.groupBlendMode; }\n    get color() { return this.renderable.groupColorAlpha; }\n\n    public reset()\n    {\n        this.renderable = null;\n        this.texture = null;\n        this._batcher = null;\n        this._batch = null;\n        this.bounds = null;\n    }\n}\n","export const textureBit = {\n    name: 'texture-bit',\n    vertex: {\n        header: /* wgsl */`\n\n        struct TextureUniforms {\n            uTextureMatrix:mat3x3<f32>,\n        }\n\n        @group(2) @binding(2) var<uniform> textureUniforms : TextureUniforms;\n        `,\n        main: /* wgsl */`\n            uv = (textureUniforms.uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    },\n    fragment: {\n        header: /* wgsl */`\n            @group(2) @binding(0) var uTexture: texture_2d<f32>;\n            @group(2) @binding(1) var uSampler: sampler;\n\n         \n        `,\n        main: /* wgsl */`\n            outColor = textureSample(uTexture, uSampler, vUV);\n        `\n    }\n};\n\nexport const textureBitGl = {\n    name: 'texture-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTextureMatrix;\n        `,\n        main: /* glsl */`\n            uv = (uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    },\n    fragment: {\n        header: /* glsl */`\n        uniform sampler2D uTexture;\n\n         \n        `,\n        main: /* glsl */`\n            outColor = texture(uTexture, vUV);\n        `\n    }\n};\n\n","import { warn } from '../../../../../utils/logging/warn';\nimport { getAttributeInfoFromFormat } from '../../../shared/geometry/utils/getAttributeInfoFromFormat';\n\nimport type { Geometry } from '../../../shared/geometry/Geometry';\nimport type { ExtractedAttributeData } from './extractAttributesFromGlProgram';\n\n/**\n * This function looks at the attribute information provided to the geometry and attempts\n * to fill in an gaps. WE do this by looking at the extracted data from the shader and\n * making best guesses.\n *\n * Most of th etime users don't need to provide all the attribute info beyond the data itself, so we\n * can fill in the gaps for them. If you are using attributes in a more advanced way, you can\n * don't forget to add all the info at creation!\n * @param geometry - the geometry to ensure attributes for\n * @param extractedData - the extracted data from the shader\n */\nexport function ensureAttributes(\n    geometry: Geometry,\n    extractedData: Record<string, ExtractedAttributeData>\n): void\n{\n    for (const i in geometry.attributes)\n    {\n        const attribute = geometry.attributes[i];\n        const attributeData = extractedData[i];\n\n        if (attributeData)\n        {\n            attribute.format ??= attributeData.format;\n            attribute.offset ??= attributeData.offset;\n            attribute.instance ??= attributeData.instance;\n        }\n        else\n        {\n            // eslint-disable-next-line max-len\n            warn(`Attribute ${i} is not present in the shader, but is present in the geometry. Unable to infer attribute details.`);\n        }\n    }\n\n    ensureStartAndStride(geometry);\n}\n\nfunction ensureStartAndStride(geometry: Geometry): void\n{\n    const { buffers, attributes } = geometry;\n\n    const tempStride: Record<string, number> = {};\n    const tempStart: Record<string, number> = {};\n\n    for (const j in buffers)\n    {\n        const buffer = buffers[j];\n\n        tempStride[buffer.uid] = 0;\n        tempStart[buffer.uid] = 0;\n    }\n\n    for (const j in attributes)\n    {\n        const attribute = attributes[j];\n\n        tempStride[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n    }\n\n    for (const j in attributes)\n    {\n        const attribute = attributes[j];\n\n        attribute.stride ??= tempStride[attribute.buffer.uid];\n\n        attribute.start ??= tempStart[attribute.buffer.uid];\n\n        tempStart[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n    }\n}\n","import { CanvasSource } from '../sources/CanvasSource';\nimport { Texture } from '../Texture';\n\nimport type { ICanvas } from '../../../../../environment/canvas/ICanvas';\nimport type { CanvasSourceOptions } from '../sources/CanvasSource';\n\nconst canvasCache: Map<ICanvas, Texture<CanvasSource>> = new Map();\n\nexport function getCanvasTexture(canvas: ICanvas, options?: CanvasSourceOptions): Texture<CanvasSource>\n{\n    if (!canvasCache.has(canvas))\n    {\n        const texture = new Texture({\n            source: new CanvasSource({\n                resource: canvas,\n                ...options,\n            })\n        });\n\n        const onDestroy = () =>\n        {\n            if (canvasCache.get(canvas) === texture)\n            {\n                canvasCache.delete(canvas);\n            }\n        };\n\n        texture.once('destroy', onDestroy);\n        texture.source.once('destroy', onDestroy);\n\n        canvasCache.set(canvas, texture);\n    }\n\n    return canvasCache.get(canvas);\n}\n\nexport function hasCachedCanvasTexture(canvas: ICanvas): boolean\n{\n    return canvasCache.has(canvas);\n}\n","import type { UNIFORM_TYPES_SINGLE } from '../types';\n\nfunction loopMatrix(col: number, row: number)\n{\n    const total = col * row;\n\n    return `\n        for (let i = 0; i < ${total}; i++) {\n            data[offset + (((i / ${col})|0) * 4) + (i % ${col})] = v[i];\n        }\n    `;\n}\n\nexport const uboSyncFunctionsSTD40: Record<UNIFORM_TYPES_SINGLE, string> = {\n    f32: `\n        data[offset] = v;`,\n    i32: `\n        dataInt32[offset] = v;`,\n    'vec2<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];`,\n    'vec3<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];`,\n    'vec4<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];`,\n    'vec2<i32>': `\n        dataInt32[offset] = v[0];\n        dataInt32[offset + 1] = v[1];`,\n    'vec3<i32>': `\n        dataInt32[offset] = v[0];\n        dataInt32[offset + 1] = v[1];\n        dataInt32[offset + 2] = v[2];`,\n    'vec4<i32>': `\n        dataInt32[offset] = v[0];\n        dataInt32[offset + 1] = v[1];\n        dataInt32[offset + 2] = v[2];\n        dataInt32[offset + 3] = v[3];`,\n    'mat2x2<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 4] = v[2];\n        data[offset + 5] = v[3];`,\n    'mat3x3<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];`,\n    'mat4x4<f32>': `\n        for (let i = 0; i < 16; i++) {\n            data[offset + i] = v[i];\n        }`,\n    'mat3x2<f32>': loopMatrix(3, 2),\n    'mat4x2<f32>': loopMatrix(4, 2),\n    'mat2x3<f32>': loopMatrix(2, 3),\n    'mat4x3<f32>': loopMatrix(4, 3),\n    'mat2x4<f32>': loopMatrix(2, 4),\n    'mat3x4<f32>': loopMatrix(3, 4),\n};\n\nexport const uboSyncFunctionsWGSL: Record<UNIFORM_TYPES_SINGLE, string> = {\n    ...uboSyncFunctionsSTD40,\n    'mat2x2<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    `,\n};\n","import { STENCIL_MODES } from '../../shared/state/const';\n\nexport interface StencilState\n{\n    stencilWriteMask?: number\n    stencilReadMask?: number;\n    stencilFront?: {\n        compare: 'always' | 'equal' | 'not-equal';\n        passOp: 'increment-clamp' | 'decrement-clamp' | 'keep' | 'replace';\n    },\n    stencilBack?: {\n        compare: 'always' | 'equal' | 'not-equal';\n        passOp: 'increment-clamp' | 'decrement-clamp' | 'keep' | 'replace';\n    }\n}\n\nexport const GpuStencilModesToPixi: StencilState[] = [];\n\nGpuStencilModesToPixi[STENCIL_MODES.NONE] = undefined;\n\nGpuStencilModesToPixi[STENCIL_MODES.DISABLED] = {\n    stencilWriteMask: 0,\n    stencilReadMask: 0,\n};\n\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_ADD] = {\n    stencilFront: {\n        compare: 'equal',\n        passOp: 'increment-clamp',\n    },\n    stencilBack: {\n        compare: 'equal',\n        passOp: 'increment-clamp',\n    },\n};\n\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_REMOVE] = {\n    stencilFront: {\n        compare: 'equal',\n        passOp: 'decrement-clamp',\n    },\n    stencilBack: {\n        compare: 'equal',\n        passOp: 'decrement-clamp',\n    },\n};\n\nGpuStencilModesToPixi[STENCIL_MODES.MASK_ACTIVE] = {\n    stencilWriteMask: 0,\n    stencilFront: {\n        compare: 'equal',\n        passOp: 'keep',\n    },\n    stencilBack: {\n        compare: 'equal',\n        passOp: 'keep',\n    },\n};\n\nGpuStencilModesToPixi[STENCIL_MODES.INVERSE_MASK_ACTIVE] = {\n    stencilWriteMask: 0,\n    stencilFront: {\n        compare: 'not-equal',\n        passOp: 'replace',\n    },\n    stencilBack: {\n        compare: 'not-equal',\n        passOp: 'replace',\n    },\n};\n","import { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { CLEAR } from '../../gl/const';\nimport { calculateProjection } from '../../gpu/renderTarget/calculateProjection';\nimport { SystemRunner } from '../system/SystemRunner';\nimport { CanvasSource } from '../texture/sources/CanvasSource';\nimport { TextureSource } from '../texture/sources/TextureSource';\nimport { Texture } from '../texture/Texture';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture';\nimport { isRenderingToScreen } from './isRenderingToScreen';\nimport { RenderTarget } from './RenderTarget';\n\nimport type { RgbaArray } from '../../../../color/Color';\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { CLEAR_OR_BOOL } from '../../gl/const';\nimport type { GlRenderTarget } from '../../gl/GlRenderTarget';\nimport type { GpuRenderTarget } from '../../gpu/renderTarget/GpuRenderTarget';\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\nimport type { BindableTexture } from '../texture/Texture';\n\n/**\n * A render surface is a texture, canvas, or render target\n * @memberof rendering\n * @see environment.ICanvas\n * @see rendering.Texture\n * @see rendering.RenderTarget\n */\nexport type RenderSurface = ICanvas | BindableTexture | RenderTarget;\n\n/**\n * stores a render target and its frame\n * @ignore\n */\ninterface RenderTargetAndFrame\n{\n    /** the render target */\n    renderTarget: RenderTarget;\n    /** the frame to use when using the render target */\n    frame: Rectangle\n}\n\n/**\n * An adaptor interface for RenderTargetSystem to support WebGL and WebGPU.\n * This is used internally by the renderer, and is not intended to be used directly.\n * @ignore\n */\nexport interface RenderTargetAdaptor<RENDER_TARGET extends GlRenderTarget | GpuRenderTarget>\n{\n    init(\n        /** the renderer */\n        renderer: Renderer,\n        /** the render target system */\n        renderTargetSystem: RenderTargetSystem<RENDER_TARGET>\n    ): void\n\n    /** A function copies the contents of a render surface to a texture */\n    copyToTexture(\n        /** the render surface to copy from  */\n        sourceRenderSurfaceTexture: RenderTarget,\n        /** the texture to copy to */\n        destinationTexture: Texture,\n        /** the origin of the copy */\n        originSrc: { x: number; y: number },\n        /** the size of the copy */\n        size: { width: number; height: number },\n        /** the destination origin (top left to paste from!) */\n        originDest?: { x: number; y: number },\n    ): Texture\n\n    /** starts a render pass on the render target */\n    startRenderPass(\n        /** the render target to start the render pass on */\n        renderTarget: RenderTarget,\n        /* the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111* */\n        clear: CLEAR_OR_BOOL,\n        /** the color to clear to */\n        clearColor?: RgbaArray,\n        /** the viewport to use */\n        viewport?: Rectangle\n    ): void\n\n    /** clears the current render target to the specified color */\n    clear(\n        /** the render target to clear */\n        renderTarget: RenderTarget,\n        /** the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111 */\n        clear: CLEAR_OR_BOOL,\n        /** the color to clear to   */\n        clearColor?: RgbaArray,\n        /** the viewport to use */\n        viewport?: Rectangle\n    ): void\n\n    /** finishes the current render pass */\n    finishRenderPass(renderTarget: RenderTarget): void\n\n    /** called after the render pass is finished */\n    postrender?(renderTarget: RenderTarget): void;\n\n    /** called before the render main pass is started */\n    prerender?(renderTarget: RenderTarget): void;\n\n    /**\n     * initializes a gpu render target. Both renderers use this function to initialize a gpu render target\n     * Its different type of object depending on the renderer.\n     */\n    initGpuRenderTarget(\n        /** the render target to initialize */\n        renderTarget: RenderTarget\n    ): RENDER_TARGET\n\n    /** called when a render target is resized */\n    resizeGpuRenderTarget(\n        /** the render target to resize */\n        renderTarget: RenderTarget\n    ): void\n\n    /** destroys the gpu render target */\n    destroyGpuRenderTarget(\n        /** the render target to destroy */\n        gpuRenderTarget: RENDER_TARGET\n    ): void\n}\n\n/**\n * A system that manages render targets. A render target is essentially a place where the shaders can color in the pixels.\n * The render target system is responsible for binding the render target to the renderer, and managing the viewport.\n * Render targets can be pushed and popped.\n *\n * To make it easier, you can also bind textures and canvases too. This will automatically create a render target for you.\n * The render target itself is a lot more powerful than just a texture or canvas,\n * as it can have multiple textures attached to it.\n * It will also give ou fine grain control over the stencil buffer / depth texture.\n * @example\n *\n * ```js\n *\n * // create a render target\n * const renderTarget = new RenderTarget({\n *   colorTextures: [new TextureSource({ width: 100, height: 100 })],\n * });\n *\n * // bind the render target\n * renderer.renderTarget.bind(renderTarget);\n *\n * // draw something!\n * ```\n * @memberof rendering\n */\nexport class RenderTargetSystem<RENDER_TARGET extends GlRenderTarget | GpuRenderTarget> implements System\n{\n    /** When rendering of a scene begins, this is where the root render surface is stored */\n    public rootRenderTarget: RenderTarget;\n    /** This is the root viewport for the render pass*/\n    public rootViewPort = new Rectangle();\n    /** A boolean that lets the dev know if the current render pass is rendering to the screen. Used by some plugins */\n    public renderingToScreen: boolean;\n    /** the current active render target */\n    public renderTarget: RenderTarget;\n    /** the current active render surface that the render target is created from */\n    public renderSurface: RenderSurface;\n    /** the current viewport that the gpu is using */\n    public readonly viewport = new Rectangle();\n    /**\n     * a runner that lets systems know if the active render target has changed.\n     * Eg the Stencil System needs to know so it can manage the stencil buffer\n     */\n    public readonly onRenderTargetChange = new SystemRunner('onRenderTargetChange');\n    /** the projection matrix that is used by the shaders based on the active render target and the viewport */\n    public readonly projectionMatrix = new Matrix();\n    /** the default clear color for render targets */\n    public readonly defaultClearColor: RgbaArray = [0, 0, 0, 0];\n    /** a reference to the adaptor that interfaces with WebGL / WebGP */\n    public readonly adaptor: RenderTargetAdaptor<RENDER_TARGET>;\n    /**\n     * a hash that stores the render target for a given render surface. When you pass in a texture source,\n     * a render target is created for it. This map stores and makes it easy to retrieve the render target\n     */\n    private readonly _renderSurfaceToRenderTargetHash: Map<RenderSurface, RenderTarget>\n        = new Map();\n    /** A hash that stores a gpu render target for a given render target. */\n    private _gpuRenderTargetHash: Record<number, RENDER_TARGET> = Object.create(null);\n    /**\n     * A stack that stores the render target and frame that is currently being rendered to.\n     * When push is called, the current render target is stored in this stack.\n     * When pop is called, the previous render target is restored.\n     */\n    private readonly _renderTargetStack: RenderTargetAndFrame[] = [];\n    /** A reference to the renderer */\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        renderer.renderableGC.addManagedHash(this, '_gpuRenderTargetHash');\n    }\n\n    /** called when dev wants to finish a render pass */\n    public finishRenderPass()\n    {\n        this.adaptor.finishRenderPass(this.renderTarget);\n    }\n\n    /**\n     * called when the renderer starts to render a scene.\n     * @param options\n     * @param options.target - the render target to render to\n     * @param options.clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n     * @param options.clearColor - the color to clear to\n     * @param options.frame - the frame to render to\n     */\n    public renderStart({\n        target,\n        clear,\n        clearColor,\n        frame\n    }: {\n        target: RenderSurface;\n        clear: CLEAR_OR_BOOL;\n        clearColor: RgbaArray;\n        frame?: Rectangle\n    }): void\n    {\n        // TODO no need to reset this - use optimised index instead\n        this._renderTargetStack.length = 0;\n\n        this.push(\n            target,\n            clear,\n            clearColor,\n            frame\n        );\n\n        this.rootViewPort.copyFrom(this.viewport);\n        this.rootRenderTarget = this.renderTarget;\n        this.renderingToScreen = isRenderingToScreen(this.rootRenderTarget);\n\n        this.adaptor.prerender?.(this.rootRenderTarget);\n    }\n\n    public postrender()\n    {\n        this.adaptor.postrender?.(this.rootRenderTarget);\n    }\n\n    /**\n     * Binding a render surface! This is the main function of the render target system.\n     * It will take the RenderSurface (which can be a texture, canvas, or render target) and bind it to the renderer.\n     * Once bound all draw calls will be rendered to the render surface.\n     *\n     * If a frame is not provide and the render surface is a texture, the frame of the texture will be used.\n     * @param renderSurface - the render surface to bind\n     * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n     * @param clearColor - the color to clear to\n     * @param frame - the frame to render to\n     * @returns the render target that was bound\n     */\n    public bind(\n        renderSurface: RenderSurface,\n        clear: CLEAR_OR_BOOL = true,\n        clearColor?: RgbaArray,\n        frame?: Rectangle\n    ): RenderTarget\n    {\n        const renderTarget = this.getRenderTarget(renderSurface);\n\n        const didChange = this.renderTarget !== renderTarget;\n\n        this.renderTarget = renderTarget;\n        this.renderSurface = renderSurface;\n\n        const gpuRenderTarget = this.getGpuRenderTarget(renderTarget);\n\n        if (renderTarget.pixelWidth !== gpuRenderTarget.width\n            || renderTarget.pixelHeight !== gpuRenderTarget.height)\n        {\n            this.adaptor.resizeGpuRenderTarget(renderTarget);\n\n            gpuRenderTarget.width = renderTarget.pixelWidth;\n            gpuRenderTarget.height = renderTarget.pixelHeight;\n        }\n\n        const source = renderTarget.colorTexture;\n        const viewport = this.viewport;\n\n        const pixelWidth = source.pixelWidth;\n        const pixelHeight = source.pixelHeight;\n\n        if (!frame && renderSurface instanceof Texture)\n        {\n            frame = renderSurface.frame;\n        }\n\n        if (frame)\n        {\n            const resolution = source._resolution;\n\n            viewport.x = ((frame.x * resolution) + 0.5) | 0;\n            viewport.y = ((frame.y * resolution) + 0.5) | 0;\n            viewport.width = ((frame.width * resolution) + 0.5) | 0;\n            viewport.height = ((frame.height * resolution) + 0.5) | 0;\n        }\n        else\n        {\n            viewport.x = 0;\n            viewport.y = 0;\n            viewport.width = pixelWidth;\n            viewport.height = pixelHeight;\n        }\n\n        calculateProjection(\n            this.projectionMatrix,\n            0, 0,\n            viewport.width / source.resolution,\n            viewport.height / source.resolution,\n            !renderTarget.isRoot\n        );\n\n        this.adaptor.startRenderPass(renderTarget, clear, clearColor, viewport);\n\n        if (didChange)\n        {\n            this.onRenderTargetChange.emit(renderTarget);\n        }\n\n        return renderTarget;\n    }\n\n    public clear(\n        target?: RenderSurface,\n        clear: CLEAR_OR_BOOL = CLEAR.ALL,\n        clearColor?: RgbaArray,\n    )\n    {\n        if (!clear) return;\n\n        if (target)\n        {\n            target = this.getRenderTarget(target);\n        }\n\n        this.adaptor.clear(\n            (target as RenderTarget) || this.renderTarget,\n            clear,\n            clearColor,\n            this.viewport\n        );\n    }\n\n    protected contextChange(): void\n    {\n        this._gpuRenderTargetHash = Object.create(null);\n    }\n\n    /**\n     * Push a render surface to the renderer. This will bind the render surface to the renderer,\n     * @param renderSurface - the render surface to push\n     * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n     * @param clearColor - the color to clear to\n     * @param frame - the frame to use when rendering to the render surface\n     */\n    public push(\n        renderSurface: RenderSurface,\n        clear: CLEAR | boolean = CLEAR.ALL,\n        clearColor?: RgbaArray,\n        frame?: Rectangle\n    )\n    {\n        const renderTarget = this.bind(renderSurface, clear, clearColor, frame);\n\n        this._renderTargetStack.push({\n            renderTarget,\n            frame,\n        });\n\n        return renderTarget;\n    }\n\n    /** Pops the current render target from the renderer and restores the previous render target. */\n    public pop()\n    {\n        this._renderTargetStack.pop();\n\n        const currentRenderTargetData = this._renderTargetStack[this._renderTargetStack.length - 1];\n\n        this.bind(currentRenderTargetData.renderTarget, false, null, currentRenderTargetData.frame);\n    }\n\n    /**\n     * Gets the render target from the provide render surface. Eg if its a texture,\n     * it will return the render target for the texture.\n     * If its a render target, it will return the same render target.\n     * @param renderSurface - the render surface to get the render target for\n     * @returns the render target for the render surface\n     */\n    public getRenderTarget(renderSurface: RenderSurface): RenderTarget\n    {\n        if (((renderSurface as Texture).isTexture))\n        {\n            renderSurface = (renderSurface as Texture).source;\n        }\n\n        return this._renderSurfaceToRenderTargetHash.get(renderSurface)\n        ?? this._initRenderTarget(renderSurface);\n    }\n\n    /**\n     * Copies a render surface to another texture.\n     *\n     * NOTE:\n     * for sourceRenderSurfaceTexture, The render target must be something that is written too by the renderer\n     *\n     * The following is not valid:\n     * @example\n     * const canvas = document.createElement('canvas')\n     * canvas.width = 200;\n     * canvas.height = 200;\n     *\n     * const ctx = canvas2.getContext('2d')!\n     * ctx.fillStyle = 'red'\n     * ctx.fillRect(0, 0, 200, 200);\n     *\n     * const texture = RenderTexture.create({\n     *   width: 200,\n     *   height: 200,\n     * })\n     * const renderTarget = renderer.renderTarget.getRenderTarget(canvas2);\n     *\n     * renderer.renderTarget.copyToTexture(renderTarget,texture, {x:0,y:0},{width:200,height:200},{x:0,y:0});\n     *\n     * The best way to copy a canvas is to create a texture from it. Then render with that.\n     *\n     * Parsing in a RenderTarget canvas context (with a 2d context)\n     * @param sourceRenderSurfaceTexture - the render surface to copy from\n     * @param destinationTexture - the texture to copy to\n     * @param originSrc - the origin of the copy\n     * @param originSrc.x - the x origin of the copy\n     * @param originSrc.y - the y origin of the copy\n     * @param size - the size of the copy\n     * @param size.width - the width of the copy\n     * @param size.height - the height of the copy\n     * @param originDest - the destination origin (top left to paste from!)\n     * @param originDest.x - the x origin of the paste\n     * @param originDest.y - the y origin of the paste\n     */\n    public copyToTexture(\n        sourceRenderSurfaceTexture: RenderTarget,\n        destinationTexture: Texture,\n        originSrc: { x: number; y: number },\n        size: { width: number; height: number },\n        originDest: { x: number; y: number; },\n    )\n    {\n        // fit the size to the source we don't want to go out of bounds\n\n        if (originSrc.x < 0)\n        {\n            size.width += originSrc.x;\n            originDest.x -= originSrc.x;\n            originSrc.x = 0;\n        }\n\n        if (originSrc.y < 0)\n        {\n            size.height += originSrc.y;\n            originDest.y -= originSrc.y;\n            originSrc.y = 0;\n        }\n\n        const { pixelWidth, pixelHeight } = sourceRenderSurfaceTexture;\n\n        size.width = Math.min(size.width, pixelWidth - originSrc.x);\n        size.height = Math.min(size.height, pixelHeight - originSrc.y);\n\n        return this.adaptor.copyToTexture(\n            sourceRenderSurfaceTexture,\n            destinationTexture,\n            originSrc,\n            size,\n            originDest\n        );\n    }\n\n    /**\n     * ensures that we have a depth stencil buffer available to render to\n     * This is used by the mask system to make sure we have a stencil buffer.\n     */\n    public ensureDepthStencil()\n    {\n        if (!this.renderTarget.stencil)\n        {\n            this.renderTarget.stencil = true;\n\n            this.adaptor.startRenderPass(this.renderTarget, false, null, this.viewport);\n        }\n    }\n\n    /** nukes the render target system */\n    public destroy()\n    {\n        (this._renderer as null) = null;\n\n        this._renderSurfaceToRenderTargetHash.forEach((renderTarget, key) =>\n        {\n            if (renderTarget !== key)\n            {\n                renderTarget.destroy();\n            }\n        });\n\n        this._renderSurfaceToRenderTargetHash.clear();\n\n        this._gpuRenderTargetHash = Object.create(null);\n    }\n\n    private _initRenderTarget(renderSurface: RenderSurface): RenderTarget\n    {\n        let renderTarget: RenderTarget = null;\n\n        if (CanvasSource.test(renderSurface))\n        {\n            renderSurface = getCanvasTexture(renderSurface as ICanvas).source;\n        }\n\n        if (renderSurface instanceof RenderTarget)\n        {\n            renderTarget = renderSurface;\n        }\n        else if (renderSurface instanceof TextureSource)\n        {\n            renderTarget = new RenderTarget({\n                colorTextures: [renderSurface],\n            });\n\n            if (CanvasSource.test(renderSurface.source.resource))\n            {\n                renderTarget.isRoot = true;\n            }\n\n            // TODO add a test for this\n            renderSurface.once('destroy', () =>\n            {\n                renderTarget.destroy();\n\n                this._renderSurfaceToRenderTargetHash.delete(renderSurface);\n\n                const gpuRenderTarget = this._gpuRenderTargetHash[renderTarget.uid];\n\n                if (gpuRenderTarget)\n                {\n                    this._gpuRenderTargetHash[renderTarget.uid] = null;\n                    this.adaptor.destroyGpuRenderTarget(gpuRenderTarget);\n                }\n            });\n        }\n\n        this._renderSurfaceToRenderTargetHash.set(renderSurface, renderTarget);\n\n        return renderTarget;\n    }\n\n    public getGpuRenderTarget(renderTarget: RenderTarget)\n    {\n        return this._gpuRenderTargetHash[renderTarget.uid]\n        || (this._gpuRenderTargetHash[renderTarget.uid] = this.adaptor.initGpuRenderTarget(renderTarget));\n    }\n\n    public resetState(): void\n    {\n        this.renderTarget = null;\n        this.renderSurface = null;\n    }\n}\n","import type { RenderTarget } from './RenderTarget';\n\n/**\n * Checks if the render target is viewable on the screen\n * Basically, is it a canvas element and is that canvas element in the DOM\n * @param renderTarget - the render target to check\n * @returns true if the render target is viewable on the screen\n */\nexport function isRenderingToScreen(renderTarget: RenderTarget): boolean\n{\n    const resource = renderTarget.colorTexture.source.resource;\n\n    return ((globalThis.HTMLCanvasElement && resource instanceof HTMLCanvasElement) && document.body.contains(resource));\n}\n","import type { Matrix } from '../../../../maths/matrix/Matrix';\n\nexport function calculateProjection(\n    pm: Matrix,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    flipY: boolean\n): Matrix\n{\n    const sign = flipY ? 1 : -1;\n\n    pm.identity();\n\n    pm.a = (1 / width * 2);\n    pm.d = sign * (1 / height * 2);\n\n    pm.tx = -1 - (x * pm.a);\n    pm.ty = -sign - (y * pm.d);\n\n    return pm;\n}\n","import { uniformParsers } from './uniformParsers';\n\nimport type { UboElement, UNIFORM_TYPES_SINGLE, UniformsSyncCallback } from '../types';\n\nexport function createUboSyncFunction(\n    uboElements: UboElement[],\n    parserCode: 'uboWgsl' | 'uboStd40',\n    arrayGenerationFunction: (uboElement: UboElement, offsetToAdd: number) => string,\n    singleSettersMap: Record<UNIFORM_TYPES_SINGLE, string>,\n): UniformsSyncCallback\n{\n    const funcFragments = [`\n        var v = null;\n        var v2 = null;\n        var t = 0;\n        var index = 0;\n        var name = null;\n        var arrayOffset = null;\n    `];\n\n    let prev = 0;\n\n    for (let i = 0; i < uboElements.length; i++)\n    {\n        const uboElement = uboElements[i];\n\n        const name = uboElement.data.name;\n\n        let parsed = false;\n        let offset = 0;\n\n        for (let j = 0; j < uniformParsers.length; j++)\n        {\n            const uniformParser = uniformParsers[j];\n\n            if (uniformParser.test(uboElement.data))\n            {\n                offset = uboElement.offset / 4;\n\n                funcFragments.push(\n                    `name = \"${name}\";`,\n                    `offset += ${offset - prev};`,\n                    uniformParsers[j][parserCode] || uniformParsers[j].ubo);\n                parsed = true;\n\n                break;\n            }\n        }\n\n        if (!parsed)\n        {\n            if (uboElement.data.size > 1)\n            {\n                offset = uboElement.offset / 4;\n\n                funcFragments.push(arrayGenerationFunction(uboElement, offset - prev));\n            }\n            else\n            {\n                const template = singleSettersMap[uboElement.data.type as UNIFORM_TYPES_SINGLE];\n\n                offset = uboElement.offset / 4;\n\n                funcFragments.push(/* wgsl */`\n                    v = uv.${name};\n                    offset += ${offset - prev};\n                    ${template};\n                `);\n            }\n        }\n\n        prev = offset;\n    }\n\n    const fragmentSrc = funcFragments.join('\\n');\n\n    // eslint-disable-next-line no-new-func\n    return new Function(\n        'uv',\n        'data',\n        'dataInt32',\n        'offset',\n        fragmentSrc,\n    ) as UniformsSyncCallback;\n}\n","// Parsers, each one of these will take a look at the type of shader property and uniform.\n// if they pass the test function then the code function is called that returns a the shader upload code for that uniform.\n// Shader upload code is automagically generated with these parsers.\n// If no parser is valid then the default upload functions are used.\n// exposing Parsers means that custom upload logic can be added to pixi's shaders.\n// A good example would be a pixi rectangle can be directly set on a uniform.\n// If the shader sees it it knows how to upload the rectangle structure as a vec4\n// format is as follows:\n//\n// {\n//     test: (data, uniform) => {} <--- test is this code should be used for this uniform\n//     code: (name, uniform) => {} <--- returns the string of the piece of code that uploads the uniform\n//     codeUbo: (name, uniform) => {} <--- returns the string of the piece of code that uploads the\n//                                         uniform to a uniform buffer\n// }\n// import { Texture } from '../../texture/Texture';\n\nimport type { Color } from '../../../../../color/Color';\nimport type { Matrix } from '../../../../../maths/matrix/Matrix';\nimport type { PointLike } from '../../../../../maths/point/PointLike';\nimport type { Rectangle } from '../../../../../maths/shapes/Rectangle';\nimport type { UNIFORM_TYPES, UniformData } from '../types';\n\nexport interface UniformParserDefinition\n{\n    type: UNIFORM_TYPES;\n    test(data: UniformData): boolean;\n    ubo?: string;\n    uboWgsl?: string;\n    uboStd40?: string;\n    uniform?: string;\n}\n\nexport const uniformParsers: UniformParserDefinition[] = [\n    // uploading pixi matrix object to mat3\n    {\n        type: 'mat3x3<f32>',\n        test: (data: UniformData): boolean =>\n        {\n            const value = data.value as Matrix;\n\n            return value.a !== undefined;\n        },\n        ubo: `\n            var matrix = uv[name].toArray(true);\n            data[offset] = matrix[0];\n            data[offset + 1] = matrix[1];\n            data[offset + 2] = matrix[2];\n            data[offset + 4] = matrix[3];\n            data[offset + 5] = matrix[4];\n            data[offset + 6] = matrix[5];\n            data[offset + 8] = matrix[6];\n            data[offset + 9] = matrix[7];\n            data[offset + 10] = matrix[8];\n        `,\n        uniform: `\n            gl.uniformMatrix3fv(ud[name].location, false, uv[name].toArray(true));\n        `\n    },\n    // uploading a pixi rectangle as a vec4\n    {\n        type: 'vec4<f32>',\n        test: (data: UniformData): boolean =>\n            data.type === 'vec4<f32>' && data.size === 1 && (data.value as Rectangle).width !== undefined,\n        ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n            data[offset + 2] = v.width;\n            data[offset + 3] = v.height;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                cv[2] = v.width;\n                cv[3] = v.height;\n                gl.uniform4f(ud[name].location, v.x, v.y, v.width, v.height);\n            }\n        `\n    },\n    // uploading a pixi point as a vec2\n    {\n        type: 'vec2<f32>',\n        test: (data: UniformData): boolean =>\n            data.type === 'vec2<f32>' && data.size === 1 && (data.value as PointLike).x !== undefined,\n        ubo:  `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                gl.uniform2f(ud[name].location, v.x, v.y);\n            }\n        `\n    },\n    // uploading a pixi color as a vec4\n    {\n        type: 'vec4<f32>',\n        test: (data: UniformData): boolean =>\n            data.type === 'vec4<f32>' && data.size === 1 && (data.value as Color).red !== undefined,\n        ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n            data[offset + 3] = v.alpha;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue || cv[3] !== v.alpha) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                cv[3] = v.alpha;\n                gl.uniform4f(ud[name].location, v.red, v.green, v.blue, v.alpha);\n            }\n        `\n    },\n    // uploading a pixi color as a vec3\n    {\n        type: 'vec3<f32>',\n        test: (data: UniformData): boolean =>\n            data.type === 'vec3<f32>' && data.size === 1 && (data.value as Color).red !== undefined,\n        ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                gl.uniform3f(ud[name].location, v.red, v.green, v.blue);\n            }\n        `\n    },\n];\n","import { unsafeEvalSupported } from '../../../../utils/browser/unsafeEvalSupported';\nimport { Buffer } from '../buffer/Buffer';\nimport { BufferUsage } from '../buffer/const';\n\nimport type { System } from '../system/System';\nimport type { UboElement, UboLayout, UniformData, UniformsSyncCallback } from './types';\nimport type { UniformGroup } from './UniformGroup';\n\nexport interface UboAdaptor\n{\n    createUboElements: (uniformData: UniformData[]) => UboLayout;\n    generateUboSync: (uboElements: UboElement[]) => UniformsSyncCallback;\n}\n\n/**\n * System plugin to the renderer to manage uniform buffers.\n * @memberof rendering\n */\nexport class UboSystem implements System\n{\n    /** Cache of uniform buffer layouts and sync functions, so we don't have to re-create them */\n    private _syncFunctionHash: Record<string, {\n        layout: UboLayout,\n        syncFunction: (uniforms: Record<string, any>, data: Float32Array, dataInt32: Int32Array, offset: number) => void\n    }> = Object.create(null);\n\n    private readonly _adaptor: UboAdaptor;\n\n    constructor(adaptor: UboAdaptor)\n    {\n        this._adaptor = adaptor;\n\n        // Validation check that this environment support `new Function`\n        this._systemCheck();\n    }\n\n    /**\n     * Overridable function by `pixi.js/unsafe-eval` to silence\n     * throwing an error if platform doesn't support unsafe-evals.\n     * @private\n     */\n    private _systemCheck(): void\n    {\n        if (!unsafeEvalSupported())\n        {\n            throw new Error('Current environment does not allow unsafe-eval, '\n                 + 'please use pixi.js/unsafe-eval module to enable support.');\n        }\n    }\n\n    public ensureUniformGroup(uniformGroup: UniformGroup): void\n    {\n        const uniformData = this.getUniformGroupData(uniformGroup);\n\n        uniformGroup.buffer ||= new Buffer({\n            data: new Float32Array(uniformData.layout.size / 4),\n            usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST,\n        });\n    }\n\n    public getUniformGroupData(uniformGroup: UniformGroup)\n    {\n        return this._syncFunctionHash[uniformGroup._signature] || this._initUniformGroup(uniformGroup);\n    }\n\n    private _initUniformGroup(uniformGroup: UniformGroup)\n    {\n        const uniformGroupSignature = uniformGroup._signature;\n\n        let uniformData = this._syncFunctionHash[uniformGroupSignature];\n\n        if (!uniformData)\n        {\n            const elements = Object.keys(uniformGroup.uniformStructures).map((i) => uniformGroup.uniformStructures[i]);\n\n            const layout = this._adaptor.createUboElements(elements);\n\n            const syncFunction = this._generateUboSync(layout.uboElements);\n\n            uniformData = this._syncFunctionHash[uniformGroupSignature] = {\n                layout,\n                syncFunction\n            };\n        }\n\n        return this._syncFunctionHash[uniformGroupSignature];\n    }\n\n    private _generateUboSync(\n        uboElements: UboElement[],\n    ): UniformsSyncCallback\n    {\n        return this._adaptor.generateUboSync(uboElements);\n    }\n\n    public syncUniformGroup(uniformGroup: UniformGroup, data?: Float32Array, offset?: number): boolean\n    {\n        const uniformGroupData = this.getUniformGroupData(uniformGroup);\n\n        uniformGroup.buffer ||= new Buffer({\n            data: new Float32Array(uniformGroupData.layout.size / 4),\n            usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST,\n        });\n\n        let dataInt32: Int32Array = null;\n\n        if (!data)\n        {\n            data = uniformGroup.buffer.data as Float32Array;\n            dataInt32 = uniformGroup.buffer.dataInt32;\n        }\n        offset ||= 0;\n\n        uniformGroupData.syncFunction(uniformGroup.uniforms, data, dataInt32, offset);\n\n        return true;\n    }\n\n    public updateUniformGroup(uniformGroup: UniformGroup): boolean\n    {\n        if (uniformGroup.isStatic && !uniformGroup._dirtyId) return false;\n        uniformGroup._dirtyId = 0;\n\n        const synced = this.syncUniformGroup(uniformGroup);\n\n        uniformGroup.buffer.update();\n\n        return synced;\n    }\n\n    public destroy(): void\n    {\n        this._syncFunctionHash = null;\n    }\n}\n","export function colorToUniform(rgb: number, alpha: number, out: Float32Array, offset: number)\n{\n    // TODO replace with Color..\n    out[offset++] = ((rgb >> 16) & 0xFF) / 255;\n    out[offset++] = ((rgb >> 8) & 0xFF) / 255;\n    out[offset++] = (rgb & 0xFF) / 255;\n    out[offset++] = alpha;\n}\n\nexport function color32BitToUniform(abgr: number, out: Float32Array, offset: number)\n{\n    const alpha = ((abgr >> 24) & 0xFF) / 255;\n\n    out[offset++] = ((abgr & 0xFF) / 255) * alpha;\n    out[offset++] = (((abgr >> 8) & 0xFF) / 255) * alpha;\n    out[offset++] = (((abgr >> 16) & 0xFF) / 255) * alpha;\n    out[offset++] = alpha;\n}\n","import EventEmitter from 'eventemitter3';\nimport { uid } from '../../../../utils/data/uid';\n\nimport type { BindResource } from '../../gpu/shader/BindResource';\nimport type { Buffer } from './Buffer';\n\n/**\n * A resource that can be bound to a bind group and used in a shader.\n * Whilst a buffer can be used as a resource, this class allows you to specify an offset and size of the buffer to use.\n * This is useful if you have a large buffer and only part of it is used in a shader.\n *\n * This resource, will listen for changes on the underlying buffer and emit a itself if the buffer changes shape.\n * @example\n *\n * const buffer = new Buffer({\n *     data: new Float32Array(1000),\n *    usage: BufferUsage.UNIFORM,\n * });\n * // Create a buffer resource that uses the first 100 bytes of a buffer\n * const bufferResource = new BufferResource({\n *    buffer,\n *    offset: 0,\n *    size: 100,\n * });\n * @memberof rendering\n */\nexport class BufferResource extends EventEmitter<{\n    change: BindResource,\n}> implements BindResource\n{\n    /**\n     * emits when the underlying buffer has changed shape (i.e. resized)\n     * letting the renderer know that it needs to discard the old buffer on the GPU and create a new one\n     * @event change\n     */\n\n    /** a unique id for this uniform group used through the renderer */\n    public readonly uid: number = uid('buffer');\n\n    /**\n     * a resource type, used to identify how to handle it when its in a bind group / shader resource\n     * @internal\n     * @ignore\n     */\n    public readonly _resourceType = 'bufferResource';\n\n    /**\n     * used internally to know if a uniform group was used in the last render pass\n     * @internal\n     * @ignore\n     */\n    public _touched = 0;\n\n    /**\n     * the resource id used internally by the renderer to build bind group keys\n     * @internal\n     * @ignore\n     */\n    public _resourceId = uid('resource');\n\n    /** the underlying buffer that this resource is using */\n    public buffer: Buffer;\n    /** the offset of the buffer this resource is using. If not provided, then it will use the offset of the buffer. */\n    public readonly offset: number;\n    /** the size of the buffer this resource is using. If not provided, then it will use the size of the buffer. */\n    public readonly size: number;\n    /**\n     * A cheeky hint to the GL renderer to let it know this is a BufferResource\n     * @internal\n     * @ignore\n     */\n    public readonly _bufferResource = true;\n\n    /**\n     * Has the Buffer resource been destroyed?\n     * @readonly\n     */\n    public destroyed = false;\n\n    /**\n     * Create a new Buffer Resource.\n     * @param options - The options for the buffer resource\n     * @param options.buffer - The underlying buffer that this resource is using\n     * @param options.offset - The offset of the buffer this resource is using.\n     * If not provided, then it will use the offset of the buffer.\n     * @param options.size - The size of the buffer this resource is using.\n     * If not provided, then it will use the size of the buffer.\n     */\n    constructor({ buffer, offset, size }: { buffer: Buffer; offset?: number; size?: number; })\n    {\n        super();\n\n        this.buffer = buffer;\n        this.offset = offset | 0;\n        this.size = size;\n\n        this.buffer.on('change', this.onBufferChange, this);\n    }\n\n    protected onBufferChange(): void\n    {\n        this._resourceId = uid('resource');\n\n        this.emit('change', this);\n    }\n\n    /**\n     * Destroys this resource. Make sure the underlying buffer is not used anywhere else\n     * if you want to destroy it as well, or code will explode\n     * @param destroyBuffer - Should the underlying buffer be destroyed as well?\n     */\n    public destroy(destroyBuffer = false): void\n    {\n        this.destroyed = true;\n\n        if (destroyBuffer)\n        {\n            this.buffer.destroy();\n        }\n\n        this.emit('change', this);\n\n        this.buffer = null;\n    }\n}\n","import { ExtensionType } from '../../extensions/Extensions';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe, RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { RenderContainer } from './RenderContainer';\n\n/**\n * The CustomRenderPipe is a render pipe that allows for custom rendering logic for your renderable objects.\n * @example\n * import { RenderContainer } from 'pixi.js';\n *\n * const renderContainer = new RenderContainer(\n * (renderer) =>  {\n *     renderer.clear({\n *       clearColor: 'green', // clear the screen to green when rendering this item\n *     });\n * })\n * @memberof rendering\n */\nexport class CustomRenderPipe implements InstructionPipe<RenderContainer>, RenderPipe<RenderContainer>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'customRender',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public updateRenderable() { /** empty */ }\n    public destroyRenderable() { /** empty */ }\n    public validateRenderable() { return false; }\n\n    public addRenderable(container: RenderContainer, instructionSet: InstructionSet): void\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add(container);\n    }\n\n    public execute(container: RenderContainer)\n    {\n        if (!container.isRenderable) return;\n\n        container.render(this._renderer);\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n    }\n}\n","import type { InstructionPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { RenderPipes } from '../../../rendering/renderers/types';\nimport type { RenderGroup } from '../RenderGroup';\n\nexport function executeInstructions(renderGroup: RenderGroup, renderer: RenderPipes)\n{\n    const instructionSet = renderGroup.instructionSet;\n    const instructions = instructionSet.instructions;\n\n    for (let i = 0; i < instructionSet.instructionSize; i++)\n    {\n        const instruction = instructions[i];\n\n        (renderer[instruction.renderPipeId as keyof RenderPipes] as InstructionPipe<any>).execute(instruction);\n    }\n}\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { Matrix } from '../../maths/matrix/Matrix';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableSprite } from '../sprite/BatchableSprite';\nimport { executeInstructions } from './utils/executeInstructions';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { RenderGroup } from './RenderGroup';\n\nconst tempMatrix = new Matrix();\n\nexport class RenderGroupPipe implements InstructionPipe<RenderGroup>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'renderGroup',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public addRenderGroup(renderGroup: RenderGroup, instructionSet: InstructionSet): void\n    {\n        if (renderGroup.isCachedAsTexture)\n        {\n            this._addRenderableCacheAsTexture(renderGroup, instructionSet);\n        }\n        else\n        {\n            this._addRenderableDirect(renderGroup, instructionSet);\n        }\n    }\n\n    public execute(renderGroup: RenderGroup)\n    {\n        if (!renderGroup.isRenderable) return;\n\n        if (renderGroup.isCachedAsTexture)\n        {\n            this._executeCacheAsTexture(renderGroup);\n        }\n        else\n        {\n            this._executeDirect(renderGroup);\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n    }\n\n    private _addRenderableDirect(renderGroup: RenderGroup, instructionSet: InstructionSet): void\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        if (renderGroup._batchableRenderGroup)\n        {\n            BigPool.return(renderGroup._batchableRenderGroup);\n            renderGroup._batchableRenderGroup = null;\n        }\n\n        instructionSet.add(renderGroup);\n    }\n\n    private _addRenderableCacheAsTexture(renderGroup: RenderGroup, instructionSet: InstructionSet): void\n    {\n        const batchableRenderGroup = renderGroup._batchableRenderGroup ??= BigPool.get(BatchableSprite);\n\n        batchableRenderGroup.renderable = renderGroup.root;\n        batchableRenderGroup.transform = renderGroup.root.relativeGroupTransform;\n        batchableRenderGroup.texture = renderGroup.texture;\n        batchableRenderGroup.bounds = renderGroup._textureBounds;\n\n        instructionSet.add(renderGroup);\n        this._renderer.renderPipes.batch.addToBatch(batchableRenderGroup, instructionSet);\n    }\n\n    private _executeCacheAsTexture(renderGroup: RenderGroup): void\n    {\n        if (renderGroup.textureNeedsUpdate)\n        {\n            renderGroup.textureNeedsUpdate = false;\n\n            const worldTransformMatrix = tempMatrix\n                .identity()\n                .translate(\n                    -renderGroup._textureBounds.x,\n                    -renderGroup._textureBounds.y\n                );\n\n            this._renderer.renderTarget.push(renderGroup.texture, true, null, renderGroup.texture.frame);\n\n            this._renderer.globalUniforms.push({\n                worldTransformMatrix,\n                worldColor: 0xFFFFFFFF,\n            });\n\n            executeInstructions(renderGroup, this._renderer.renderPipes);\n\n            this._renderer.renderTarget.finishRenderPass();\n\n            this._renderer.renderTarget.pop();\n            this._renderer.globalUniforms.pop();\n        }\n\n        renderGroup._batchableRenderGroup._batcher.updateElement(renderGroup._batchableRenderGroup);\n        renderGroup._batchableRenderGroup._batcher.geometry.buffers[0].update();\n    }\n\n    private _executeDirect(renderGroup: RenderGroup): void\n    {\n        this._renderer.globalUniforms.push({\n            worldTransformMatrix: renderGroup.inverseParentTextureTransform,\n            worldColor: renderGroup.worldColorAlpha,\n        });\n\n        executeInstructions(renderGroup, this._renderer.renderPipes);\n\n        this._renderer.globalUniforms.pop();\n    }\n}\n","/**\n * nulls all slots in an array from a certain index.\n * assume that when a null item is hit, the rest are also null.\n * Which will be the case for where this is used!\n * @param list - the array to clean\n * @param index - the index to start from\n */\nexport function clearList(list: Array<unknown>, index?: number)\n{\n    index ||= 0;\n\n    for (let j = index; j < list.length; j++)\n    {\n        if (list[j])\n        {\n            list[j] = null;\n        }\n        else\n        {\n            break;\n        }\n    }\n}\n","import { Container, UPDATE_BLEND, UPDATE_COLOR, UPDATE_VISIBLE } from '../Container';\nimport { clearList } from './clearList';\nimport { multiplyColors } from './multiplyColors';\n\nimport type { ViewContainer } from '../../view/ViewContainer';\nimport type { RenderGroup } from '../RenderGroup';\n\nconst tempContainer = new Container();\nconst UPDATE_BLEND_COLOR_VISIBLE = UPDATE_VISIBLE | UPDATE_COLOR | UPDATE_BLEND;\n\nexport function updateRenderGroupTransforms(renderGroup: RenderGroup, updateChildRenderGroups = false)\n{\n    updateRenderGroupTransform(renderGroup);\n\n    const childrenToUpdate = renderGroup.childrenToUpdate;\n\n    const updateTick = renderGroup.updateTick++;\n\n    for (const j in childrenToUpdate)\n    {\n        const renderGroupDepth = Number(j);\n\n        const childrenAtDepth = childrenToUpdate[j];\n\n        const list = childrenAtDepth.list;\n        const index = childrenAtDepth.index;\n\n        for (let i = 0; i < index; i++)\n        {\n            const child = list[i];\n\n            // check that these things match our layer and depth - if the renderGroup does not match,\n            // the child has been re-parented into another rendergroup since it asked to be updated so we can ignore it here\n            // secondly if the relativeRenderGroupDepth has changed, then the it means it will have been nested at a\n            // different different level in the render group - so we can wait for the update that does in fact match\n            if (child.parentRenderGroup === renderGroup && child.relativeRenderGroupDepth === renderGroupDepth)\n            {\n                updateTransformAndChildren(child, updateTick, 0);\n            }\n        }\n\n        clearList(list, index);\n\n        childrenAtDepth.index = 0;\n    }\n\n    if (updateChildRenderGroups)\n    {\n        for (let i = 0; i < renderGroup.renderGroupChildren.length; i++)\n        {\n            updateRenderGroupTransforms(renderGroup.renderGroupChildren[i], updateChildRenderGroups);\n        }\n    }\n}\n\nexport function updateRenderGroupTransform(renderGroup: RenderGroup)\n{\n    const root = renderGroup.root;\n\n    let worldAlpha;\n\n    if (renderGroup.renderGroupParent)\n    {\n        const renderGroupParent = renderGroup.renderGroupParent;\n\n        renderGroup.worldTransform.appendFrom(\n            root.relativeGroupTransform,\n            renderGroupParent.worldTransform,\n        );\n\n        renderGroup.worldColor = multiplyColors(\n            root.groupColor,\n            renderGroupParent.worldColor,\n        );\n\n        worldAlpha = root.groupAlpha * renderGroupParent.worldAlpha;\n    }\n    else\n    {\n        renderGroup.worldTransform.copyFrom(root.localTransform);\n        renderGroup.worldColor = root.localColor;\n        worldAlpha = root.localAlpha;\n    }\n\n    // eslint-disable-next-line no-nested-ternary\n    worldAlpha = worldAlpha < 0 ? 0 : (worldAlpha > 1 ? 1 : worldAlpha);\n    renderGroup.worldAlpha = worldAlpha;\n\n    renderGroup.worldColorAlpha = renderGroup.worldColor\n            + (((worldAlpha * 255) | 0) << 24);\n}\n\nexport function updateTransformAndChildren(container: Container, updateTick: number, updateFlags: number)\n{\n    if (updateTick === container.updateTick) return;\n    container.updateTick = updateTick;\n\n    container.didChange = false;\n\n    const localTransform = container.localTransform;\n\n    container.updateLocalTransform();\n\n    const parent = container.parent;\n\n    if ((parent && !parent.renderGroup))\n    {\n        updateFlags |= container._updateFlags;\n\n        container.relativeGroupTransform.appendFrom(\n            localTransform,\n            parent.relativeGroupTransform,\n        );\n\n        if (updateFlags & UPDATE_BLEND_COLOR_VISIBLE)\n        {\n            updateColorBlendVisibility(container, parent, updateFlags);\n        }\n    }\n    else\n    {\n        updateFlags = container._updateFlags;\n\n        container.relativeGroupTransform.copyFrom(localTransform);\n\n        if (updateFlags & UPDATE_BLEND_COLOR_VISIBLE)\n        {\n            updateColorBlendVisibility(container, tempContainer, updateFlags);\n        }\n    }\n\n    // don't update children if its a layer..\n    if (!container.renderGroup)\n    {\n        const children = container.children;\n        const length = children.length;\n\n        for (let i = 0; i < length; i++)\n        {\n            updateTransformAndChildren(children[i], updateTick, updateFlags);\n        }\n\n        const renderGroup = container.parentRenderGroup;\n        const renderable = container as ViewContainer;\n\n        if (renderable.renderPipeId && !renderGroup.structureDidChange)\n        {\n            renderGroup.updateRenderable(renderable);\n        }\n    }\n}\n\nfunction updateColorBlendVisibility(\n    container: Container,\n    parent: Container,\n    updateFlags: number,\n): void\n{\n    if (updateFlags & UPDATE_COLOR)\n    {\n        container.groupColor = multiplyColors(\n            container.localColor,\n            parent.groupColor\n        );\n\n        let groupAlpha = container.localAlpha * parent.groupAlpha;\n\n        // eslint-disable-next-line no-nested-ternary\n        groupAlpha = groupAlpha < 0 ? 0 : (groupAlpha > 1 ? 1 : groupAlpha);\n\n        container.groupAlpha = groupAlpha;\n        container.groupColorAlpha = container.groupColor + (((groupAlpha * 255) | 0) << 24);\n    }\n\n    if (updateFlags & UPDATE_BLEND)\n    {\n        container.groupBlendMode = container.localBlendMode === 'inherit' ? parent.groupBlendMode : container.localBlendMode;\n    }\n\n    if (updateFlags & UPDATE_VISIBLE)\n    {\n        container.globalDisplayStatus = container.localDisplayStatus & parent.globalDisplayStatus;\n    }\n\n    container._updateFlags = 0;\n}\n\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { Matrix } from '../../maths/matrix/Matrix';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool';\nimport { Bounds } from './bounds/Bounds';\nimport { clearList } from './utils/clearList';\nimport { executeInstructions } from './utils/executeInstructions';\nimport { updateRenderGroupTransforms } from './utils/updateRenderGroupTransforms';\nimport { validateRenderables } from './utils/validateRenderables';\n\nimport type { WebGPURenderer } from '../../rendering/renderers/gpu/WebGPURenderer';\nimport type { System } from '../../rendering/renderers/shared/system/System';\nimport type { Renderer, RenderPipes } from '../../rendering/renderers/types';\nimport type { ViewContainer } from '../view/ViewContainer';\nimport type { Container } from './Container';\nimport type { RenderGroup } from './RenderGroup';\n\nconst tempMatrix = new Matrix();\n\n/**\n * The view system manages the main canvas that is attached to the DOM.\n * This main role is to deal with how the holding the view reference and dealing with how it is resized.\n * @memberof rendering\n */\nexport class RenderGroupSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'renderGroup',\n    } as const;\n\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    protected render({ container, transform }: {container: Container, transform: Matrix}): void\n    {\n        // we need to save the parent and renderGroupParent, so we can restore them later\n        const parent = container.parent;\n        const renderGroupParent = container.renderGroup.renderGroupParent;\n\n        // we set the transforms and parents to null, so we can render the container without any transforms\n        container.parent = null;\n        container.renderGroup.renderGroupParent = null;\n\n        const renderer = this._renderer;\n\n        // collect all the renderGroups in the scene and then render them one by one..\n        let originalLocalTransform: Matrix = tempMatrix;\n\n        if (transform)\n        {\n            originalLocalTransform = originalLocalTransform.copyFrom(container.renderGroup.localTransform);\n            container.renderGroup.localTransform.copyFrom(transform);\n        }\n\n        //  this._assignTop(container.renderGroup, null);\n        const renderPipes = (renderer as WebGPURenderer).renderPipes;\n\n        this._updateCachedRenderGroups(container.renderGroup, null);\n\n        this._updateRenderGroups(container.renderGroup);\n\n        renderer.globalUniforms.start({\n            worldTransformMatrix: transform ? container.renderGroup.localTransform : container.renderGroup.worldTransform,\n            worldColor: container.renderGroup.worldColorAlpha,\n        });\n\n        executeInstructions(container.renderGroup, renderPipes);\n\n        // TODO need to add some events / runners for things like this to hook up to\n        if (renderPipes.uniformBatch)\n        {\n            renderPipes.uniformBatch.renderEnd();\n        }\n\n        // now return the transforms back to normal..\n        if (transform)\n        {\n            container.renderGroup.localTransform.copyFrom(originalLocalTransform);\n        }\n\n        container.parent = parent;\n        container.renderGroup.renderGroupParent = renderGroupParent;\n    }\n\n    public destroy()\n    {\n        (this._renderer as null) = null;\n    }\n\n    private _updateCachedRenderGroups(renderGroup: RenderGroup, closestCacheAsTexture: RenderGroup | null): void\n    {\n        if (renderGroup.isCachedAsTexture)\n        {\n            // early out as nothing further needs to be updated!\n            if (!renderGroup.updateCacheTexture) return;\n\n            closestCacheAsTexture = renderGroup;\n        }\n\n        renderGroup._parentCacheAsTextureRenderGroup = closestCacheAsTexture;\n\n        // now check the cacheAsTexture stuff...\n        for (let i = renderGroup.renderGroupChildren.length - 1; i >= 0; i--)\n        {\n            this._updateCachedRenderGroups(renderGroup.renderGroupChildren[i], closestCacheAsTexture);\n        }\n\n        renderGroup.invalidateMatrices();\n\n        if (renderGroup.isCachedAsTexture)\n        {\n            if (renderGroup.textureNeedsUpdate)\n            {\n                // lets get the texture ready for rendering\n                // but the rendering will not happen until the renderGroup is rendered!\n                // We also want to know now, what the bounds of the texture will be.\n                // as if the texture changes, we need to invalidate the parent render group!\n                const bounds = renderGroup.root.getLocalBounds();\n\n                bounds.ceil();\n\n                const lastTexture = renderGroup.texture;\n\n                if (renderGroup.texture)\n                {\n                    TexturePool.returnTexture(renderGroup.texture);\n                }\n\n                const renderer = this._renderer;\n                const resolution = renderGroup.textureOptions.resolution || renderer.view.resolution;\n                const antialias = renderGroup.textureOptions.antialias ?? renderer.view.antialias;\n\n                renderGroup.texture = TexturePool.getOptimalTexture(\n                    bounds.width,\n                    bounds.height,\n                    resolution,\n                    antialias\n                );\n\n                renderGroup._textureBounds ||= new Bounds();\n                renderGroup._textureBounds.copyFrom(bounds);\n\n                if (lastTexture !== renderGroup.texture)\n                {\n                    if (renderGroup.renderGroupParent)\n                    {\n                        renderGroup.renderGroupParent.structureDidChange = true;\n                    }\n                }\n            }\n        }\n        else if (renderGroup.texture)\n        {\n            TexturePool.returnTexture(renderGroup.texture);\n            renderGroup.texture = null;\n        }\n    }\n\n    private _updateRenderGroups(renderGroup: RenderGroup): void\n    {\n        const renderer = this._renderer;\n        const renderPipes = renderer.renderPipes;\n\n        renderGroup.runOnRender(renderer);\n\n        renderGroup.instructionSet.renderPipes = renderPipes;\n\n        if (!renderGroup.structureDidChange)\n        {\n            // phase 1 - validate all the renderables\n            validateRenderables(renderGroup, renderPipes);\n        }\n        else\n        {\n            clearList(renderGroup.childrenRenderablesToUpdate.list, 0);\n        }\n\n        // phase 2 - update all the transforms\n        // including updating the renderables..\n        updateRenderGroupTransforms(renderGroup);\n\n        if (renderGroup.structureDidChange)\n        {\n            renderGroup.structureDidChange = false;\n\n            // build the renderables\n            this._buildInstructions(renderGroup, renderer);\n        }\n        else\n        {\n            // update remaining renderables\n            this._updateRenderables(renderGroup);\n        }\n\n        // reset the renderables to update\n        renderGroup.childrenRenderablesToUpdate.index = 0;\n\n        // upload all the things!\n        renderer.renderPipes.batch.upload(renderGroup.instructionSet);\n\n        // early out if it's a texture and it hasn't changed!\n        if (renderGroup.isCachedAsTexture && !renderGroup.textureNeedsUpdate) return;\n\n        for (let i = 0; i < renderGroup.renderGroupChildren.length; i++)\n        {\n            this._updateRenderGroups(renderGroup.renderGroupChildren[i]);\n        }\n    }\n\n    private _updateRenderables(renderGroup: RenderGroup)\n    {\n        const { list, index } = renderGroup.childrenRenderablesToUpdate;\n\n        for (let i = 0; i < index; i++)\n        {\n            const container = list[i];\n\n            if (container.didViewUpdate)\n            {\n                renderGroup.updateRenderable(container as ViewContainer);\n            }\n        }\n\n        clearList(list, index);\n    }\n\n    /**\n     * @param renderGroup\n     * @param renderPipes\n     * @deprecated since 8.3.0\n     */\n    private _buildInstructions(renderGroup: RenderGroup, renderPipes: RenderPipes): void;\n    private _buildInstructions(renderGroup: RenderGroup, renderer: Renderer): void;\n    private _buildInstructions(renderGroup: RenderGroup, rendererOrPipes: RenderPipes | Renderer): void\n    {\n    // rebuild the scene graph based on layers...\n        const root = renderGroup.root;\n        const instructionSet = renderGroup.instructionSet;\n\n        instructionSet.reset();\n\n        // deprecate the use of renderPipes by finding the renderer attached to the batch pipe as this is always there\n        const renderer = (rendererOrPipes as Renderer).renderPipes\n            ? (rendererOrPipes as Renderer)\n            : (rendererOrPipes as RenderPipes).batch.renderer;\n        const renderPipes = renderer.renderPipes;\n\n        // TODO add some events / runners for build start\n        renderPipes.batch.buildStart(instructionSet);\n        renderPipes.blendMode.buildStart();\n        renderPipes.colorMask.buildStart();\n\n        if (root.sortableChildren)\n        {\n            root.sortChildren();\n        }\n\n        root.collectRenderablesWithEffects(instructionSet, renderer, null);\n\n        // TODO add some events / runners for build end\n        renderPipes.batch.buildEnd(instructionSet);\n        renderPipes.blendMode.buildEnd(instructionSet);\n    }\n}\n\n","import type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { RenderPipes } from '../../../rendering/renderers/types';\nimport type { RenderGroup } from '../RenderGroup';\n\nexport function validateRenderables(renderGroup: RenderGroup, renderPipes: RenderPipes): boolean\n{\n    const { list, index } = renderGroup.childrenRenderablesToUpdate;\n\n    let rebuildRequired = false;\n\n    for (let i = 0; i < index; i++)\n    {\n        const container = list[i];\n\n        // note to self: there is no need to check if container.parentRenderGroup || !container.renderGroup\n        // exist here, as this function is only called if the structure did NOT change\n        // which means they have to be valid if this function is called\n\n        const renderable = container;\n        const pipe = renderPipes[renderable.renderPipeId as keyof RenderPipes] as RenderPipe<any>;\n\n        rebuildRequired = pipe.validateRenderable(container);\n\n        if (rebuildRequired)\n        {\n            break;\n        }\n    }\n\n    renderGroup.structureDidChange = rebuildRequired;\n\n    return rebuildRequired;\n}\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableSprite } from './BatchableSprite';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { Container } from '../container/Container';\nimport type { Sprite } from './Sprite';\n\nexport class SpritePipe implements RenderPipe<Sprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'sprite',\n    } as const;\n\n    private _renderer: Renderer;\n    private _gpuSpriteHash: Record<number, BatchableSprite> = Object.create(null);\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_gpuSpriteHash');\n    }\n\n    public addRenderable(sprite: Sprite, instructionSet: InstructionSet)\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (sprite.didViewUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        // TODO visibility\n        this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n    }\n\n    public updateRenderable(sprite: Sprite)\n    {\n        const gpuSprite = this._gpuSpriteHash[sprite.uid];\n\n        if (sprite.didViewUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        gpuSprite._batcher.updateElement(gpuSprite);\n    }\n\n    public validateRenderable(sprite: Sprite): boolean\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        return !gpuSprite._batcher.checkAndUpdateTexture(\n            gpuSprite,\n            sprite._texture)\n        ;\n    }\n\n    public destroyRenderable(sprite: Sprite)\n    {\n        const batchableSprite = this._gpuSpriteHash[sprite.uid];\n\n        // this will call reset!\n        BigPool.return(batchableSprite as PoolItem);\n\n        this._gpuSpriteHash[sprite.uid] = null;\n\n        sprite.off('destroyed', this._destroyRenderableBound);\n    }\n\n    private _updateBatchableSprite(sprite: Sprite, batchableSprite: BatchableSprite)\n    {\n        batchableSprite.bounds = sprite.visualBounds;\n        batchableSprite.texture = sprite._texture;\n    }\n\n    private _getGpuSprite(sprite: Sprite): BatchableSprite\n    {\n        return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n    }\n\n    private _initGPUSprite(sprite: Sprite): BatchableSprite\n    {\n        const batchableSprite = BigPool.get(BatchableSprite);\n\n        batchableSprite.renderable = sprite;\n\n        batchableSprite.transform = sprite.groupTransform;\n        batchableSprite.texture = sprite._texture;\n        batchableSprite.bounds = sprite.visualBounds;\n        batchableSprite.roundPixels = (this._renderer._roundPixels | sprite._roundPixels) as 0 | 1;\n\n        this._gpuSpriteHash[sprite.uid] = batchableSprite;\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        sprite.on('destroyed', this._destroyRenderableBound);\n\n        return batchableSprite;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuSpriteHash)\n        {\n            BigPool.return(this._gpuSpriteHash[i] as PoolItem);\n        }\n\n        this._gpuSpriteHash = null;\n        this._renderer = null;\n    }\n}\n","import { extensions, ExtensionType } from '../../../extensions/Extensions';\nimport { State } from '../../renderers/shared/state/State';\nimport { DefaultBatcher } from './DefaultBatcher';\n\nimport type { Geometry } from '../../renderers/shared/geometry/Geometry';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { BatchPipe, InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { Shader } from '../../renderers/shared/shader/Shader';\nimport type { Renderer } from '../../renderers/types';\nimport type { Batch, BatchableElement, Batcher } from './Batcher';\n\nexport interface BatcherAdaptor\n{\n    start(batchPipe: BatcherPipe, geometry: Geometry, shader: Shader): void\n    init?(batchPipe: BatcherPipe): void;\n    execute(batchPipe: BatcherPipe, batch: Batch): void\n    contextChange?(): void;\n}\n\n/**\n * A pipe that batches elements into batches and sends them to the renderer.\n *\n * You can install new Batchers using ExtensionType.Batcher. Each render group will\n * have a default batcher and any required ones will be created on demand.\n * @memberof rendering\n */\nexport class BatcherPipe implements InstructionPipe<Batch>, BatchPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'batch',\n    } as const;\n\n    public state: State = State.for2d();\n    public renderer: Renderer;\n\n    private readonly _batchersByInstructionSet: Record<number, Record<string, Batcher>> = Object.create(null);\n\n    private _adaptor: BatcherAdaptor;\n\n    /** A record of all active batchers, keyed by their names */\n    private _activeBatches: Record<string, Batcher> = Object.create(null);\n\n    /** The currently active batcher being used to batch elements */\n    private _activeBatch: Batcher;\n\n    public static _availableBatchers: Record<string, new () => Batcher> = Object.create(null);\n\n    public static getBatcher(name: string): Batcher\n    {\n        return new this._availableBatchers[name as keyof typeof this._availableBatchers]();\n    }\n\n    constructor(renderer: Renderer, adaptor: BatcherAdaptor)\n    {\n        this.renderer = renderer;\n        this._adaptor = adaptor;\n\n        this._adaptor.init?.(this);\n    }\n\n    public buildStart(instructionSet: InstructionSet)\n    {\n        let batchers = this._batchersByInstructionSet[instructionSet.uid];\n\n        if (!batchers)\n        {\n            batchers = this._batchersByInstructionSet[instructionSet.uid] = Object.create(null);\n            batchers.default ||= new DefaultBatcher();\n        }\n\n        this._activeBatches = batchers;\n\n        this._activeBatch = this._activeBatches.default;\n\n        for (const i in this._activeBatches)\n        {\n            this._activeBatches[i].begin();\n        }\n    }\n\n    public addToBatch(batchableObject: BatchableElement, instructionSet: InstructionSet)\n    {\n        if (this._activeBatch.name !== batchableObject.batcherName)\n        {\n            this._activeBatch.break(instructionSet);\n\n            let batch = this._activeBatches[batchableObject.batcherName];\n\n            if (!batch)\n            {\n                batch = this._activeBatches[batchableObject.batcherName]\n                    = BatcherPipe.getBatcher(batchableObject.batcherName);\n                batch.begin();\n            }\n\n            this._activeBatch = batch;\n        }\n\n        this._activeBatch.add(batchableObject);\n    }\n\n    public break(instructionSet: InstructionSet)\n    {\n        this._activeBatch.break(instructionSet);\n    }\n\n    public buildEnd(instructionSet: InstructionSet)\n    {\n        this._activeBatch.break(instructionSet);\n\n        const batches = this._activeBatches;\n\n        for (const i in batches)\n        {\n            const batch = batches[i as keyof typeof batches];\n            const geometry = batch.geometry;\n\n            geometry.indexBuffer.setDataWithSize(batch.indexBuffer, batch.indexSize, true);\n\n            geometry.buffers[0].setDataWithSize(batch.attributeBuffer.float32View, batch.attributeSize, false);\n        }\n    }\n\n    public upload(instructionSet: InstructionSet)\n    {\n        const batchers = this._batchersByInstructionSet[instructionSet.uid];\n\n        for (const i in batchers)\n        {\n            const batcher = batchers[i as keyof typeof batchers];\n            const geometry = batcher.geometry;\n\n            if (batcher.dirty)\n            {\n                batcher.dirty = false;\n\n                geometry.buffers[0].update(batcher.attributeSize * 4);\n            }\n        }\n    }\n\n    public execute(batch: Batch)\n    {\n        if (batch.action === 'startBatch')\n        {\n            const batcher = batch.batcher;\n            const geometry = batcher.geometry;\n            const shader = batcher.shader;\n\n            this._adaptor.start(this, geometry, shader);\n        }\n\n        this._adaptor.execute(this, batch);\n    }\n\n    public destroy()\n    {\n        this.state = null;\n        this.renderer = null;\n\n        this._adaptor = null;\n\n        for (const i in this._activeBatches)\n        {\n            this._activeBatches[i].destroy();\n        }\n\n        this._activeBatches = null;\n    }\n}\n\nextensions.handleByMap(ExtensionType.Batcher, BatcherPipe._availableBatchers);\n\nextensions.add(DefaultBatcher);\n","import { Matrix } from '../../maths/matrix/Matrix';\nimport { GlProgram } from '../../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../../rendering/renderers/gpu/shader/GpuProgram';\nimport { UniformGroup } from '../../rendering/renderers/shared/shader/UniformGroup';\nimport { TextureMatrix } from '../../rendering/renderers/shared/texture/TextureMatrix';\nimport { Filter } from '../Filter';\nimport fragment from './mask.frag';\nimport vertex from './mask.vert';\nimport source from './mask.wgsl';\n\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { Sprite } from '../../scene/sprite/Sprite';\nimport type { FilterOptions } from '../Filter';\nimport type { FilterSystem } from '../FilterSystem';\n\nexport interface MaskFilterOptions extends FilterOptions\n{\n    sprite: Sprite,\n    inverse?: boolean;\n    scale?: number | { x: number, y: number },\n}\n\nexport class MaskFilter extends Filter\n{\n    public sprite: Sprite;\n    private readonly _textureMatrix: TextureMatrix;\n\n    constructor(options: MaskFilterOptions)\n    {\n        const { sprite, ...rest } = options;\n\n        const textureMatrix = new TextureMatrix(sprite.texture);\n\n        const filterUniforms = new UniformGroup({\n            uFilterMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uMaskClamp: { value: textureMatrix.uClampFrame, type: 'vec4<f32>' },\n            uAlpha: { value: 1, type: 'f32' },\n            uInverse: { value: options.inverse ? 1 : 0, type: 'f32' },\n        });\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'mask-filter',\n        });\n\n        super({\n            ...rest,\n            gpuProgram,\n            glProgram,\n            resources: {\n                filterUniforms,\n                uMaskTexture: sprite.texture.source,\n            },\n        });\n\n        this.sprite = sprite;\n\n        this._textureMatrix = textureMatrix;\n    }\n\n    set inverse(value: boolean)\n    {\n        this.resources.filterUniforms.uniforms.uInverse = value ? 1 : 0;\n    }\n\n    get inverse(): boolean\n    {\n        return this.resources.filterUniforms.uniforms.uInverse === 1;\n    }\n\n    public apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: Texture,\n        clearMode: boolean\n    ): void\n    {\n        // will trigger an update if the texture changed..\n        this._textureMatrix.texture = this.sprite.texture;\n\n        filterManager.calculateSpriteMatrix(\n            this.resources.filterUniforms.uniforms.uFilterMatrix as Matrix,\n            this.sprite\n        ).prepend(this._textureMatrix.mapCoord);\n\n        this.resources.uMaskTexture = this.sprite.texture.source;\n\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { FilterEffect } from '../../../filters/FilterEffect';\nimport { MaskFilter } from '../../../filters/mask/MaskFilter';\nimport { Bounds } from '../../../scene/container/bounds/Bounds';\nimport { getGlobalBounds } from '../../../scene/container/bounds/getGlobalBounds';\nimport { Sprite } from '../../../scene/sprite/Sprite';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { Texture } from '../../renderers/shared/texture/Texture';\nimport { TexturePool } from '../../renderers/shared/texture/TexturePool';\nimport { RendererType } from '../../renderers/types';\n\nimport type { Container } from '../../../scene/container/Container';\nimport type { Effect } from '../../../scene/container/Effect';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Instruction } from '../../renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { RenderTarget } from '../../renderers/shared/renderTarget/RenderTarget';\nimport type { Renderer } from '../../renderers/types';\nimport type { AlphaMask } from './AlphaMask';\n\ntype MaskMode = 'pushMaskBegin' | 'pushMaskEnd' | 'popMaskBegin' | 'popMaskEnd';\n\nconst tempBounds = new Bounds();\n\nclass AlphaMaskEffect extends FilterEffect implements PoolItem\n{\n    constructor()\n    {\n        super();\n\n        this.filters = [new MaskFilter({\n            sprite: new Sprite(Texture.EMPTY),\n            inverse: false,\n            resolution: 'inherit',\n            antialias: 'inherit'\n        })];\n    }\n\n    get sprite(): Sprite\n    {\n        return (this.filters[0] as MaskFilter).sprite;\n    }\n\n    set sprite(value: Sprite)\n    {\n        (this.filters[0] as MaskFilter).sprite = value;\n    }\n\n    get inverse(): boolean\n    {\n        return (this.filters[0] as MaskFilter).inverse;\n    }\n\n    set inverse(value: boolean)\n    {\n        (this.filters[0] as MaskFilter).inverse = value;\n    }\n\n    public init: () => void;\n}\n\nexport interface AlphaMaskInstruction extends Instruction\n{\n    renderPipeId: 'alphaMask',\n    action: MaskMode,\n    mask: AlphaMask,\n    inverse: boolean;\n    maskedContainer: Container,\n    renderMask: boolean,\n}\n\nexport interface AlphaMaskData\n{\n    filterEffect: AlphaMaskEffect,\n    maskedContainer: Container,\n    previousRenderTarget?: RenderTarget,\n    filterTexture?: Texture,\n}\n\nexport class AlphaMaskPipe implements InstructionPipe<AlphaMaskInstruction>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'alphaMask',\n    } as const;\n\n    private _renderer: Renderer;\n    private _activeMaskStage: AlphaMaskData[] = [];\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public push(mask: Effect, maskedContainer: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'alphaMask',\n            action: 'pushMaskBegin',\n            mask,\n            inverse: maskedContainer._maskOptions.inverse,\n            canBundle: false,\n            maskedContainer\n        } as AlphaMaskInstruction);\n\n        (mask as AlphaMask).inverse = maskedContainer._maskOptions.inverse;\n\n        if ((mask as AlphaMask).renderMaskToTexture)\n        {\n            const maskContainer = (mask as AlphaMask).mask;\n\n            maskContainer.includeInBuild = true;\n\n            maskContainer.collectRenderables(\n                instructionSet,\n                renderer,\n                null\n            );\n\n            maskContainer.includeInBuild = false;\n        }\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'alphaMask',\n            action: 'pushMaskEnd',\n            mask,\n            maskedContainer,\n            inverse: maskedContainer._maskOptions.inverse,\n            canBundle: false,\n        } as AlphaMaskInstruction);\n    }\n\n    public pop(mask: Effect, _maskedContainer: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'alphaMask',\n            action: 'popMaskEnd',\n            mask,\n            inverse: _maskedContainer._maskOptions.inverse,\n            canBundle: false,\n        } as AlphaMaskInstruction);\n    }\n\n    public execute(instruction: AlphaMaskInstruction)\n    {\n        const renderer = this._renderer;\n        const renderMask = instruction.mask.renderMaskToTexture;\n\n        if (instruction.action === 'pushMaskBegin')\n        {\n            const filterEffect = BigPool.get(AlphaMaskEffect);\n\n            filterEffect.inverse = instruction.inverse;\n\n            if (renderMask)\n            {\n                instruction.mask.mask.measurable = true;\n\n                const bounds = getGlobalBounds(instruction.mask.mask, true, tempBounds);\n\n                instruction.mask.mask.measurable = false;\n\n                bounds.ceil();\n\n                const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n                const filterTexture = TexturePool.getOptimalTexture(\n                    bounds.width,\n                    bounds.height,\n                    colorTextureSource._resolution,\n                    colorTextureSource.antialias\n                );\n\n                renderer.renderTarget.push(filterTexture, true);\n\n                renderer.globalUniforms.push({\n                    offset: bounds,\n                    worldColor: 0xFFFFFFFF\n                });\n\n                const sprite = filterEffect.sprite;\n\n                sprite.texture = filterTexture;\n\n                sprite.worldTransform.tx = bounds.minX;\n                sprite.worldTransform.ty = bounds.minY;\n\n                this._activeMaskStage.push({\n                    filterEffect,\n                    maskedContainer: instruction.maskedContainer,\n                    filterTexture,\n                });\n            }\n            else\n            {\n                filterEffect.sprite = instruction.mask.mask as Sprite;\n\n                this._activeMaskStage.push({\n                    filterEffect,\n                    maskedContainer: instruction.maskedContainer,\n                });\n            }\n        }\n        else if (instruction.action === 'pushMaskEnd')\n        {\n            const maskData = this._activeMaskStage[this._activeMaskStage.length - 1];\n\n            if (renderMask)\n            {\n                // WebGPU blit's automatically, but WebGL does not!\n                if (renderer.type === RendererType.WEBGL)\n                {\n                    renderer.renderTarget.finishRenderPass();\n                }\n\n                renderer.renderTarget.pop();\n                renderer.globalUniforms.pop();\n            }\n\n            renderer.filter.push({\n                renderPipeId: 'filter',\n                action: 'pushFilter',\n                container: maskData.maskedContainer,\n                filterEffect: maskData.filterEffect,\n                canBundle: false,\n            });\n        }\n        else if (instruction.action === 'popMaskEnd')\n        {\n            renderer.filter.pop();\n\n            const maskData = this._activeMaskStage.pop();\n\n            if (renderMask)\n            {\n                TexturePool.returnTexture(maskData.filterTexture);\n            }\n\n            BigPool.return(maskData.filterEffect);\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n        this._activeMaskStage = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { Container } from '../../../scene/container/Container';\nimport type { Effect } from '../../../scene/container/Effect';\nimport type { Instruction } from '../../renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../renderers/types';\nimport type { ColorMask } from './ColorMask';\n\nexport interface ColorMaskInstruction extends Instruction\n{\n    renderPipeId: 'colorMask',\n    colorMask: number,\n}\n\nexport class ColorMaskPipe implements InstructionPipe<ColorMaskInstruction>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'colorMask',\n    } as const;\n\n    private readonly _renderer: Renderer;\n    private _colorStack: number[] = [];\n    private _colorStackIndex = 0;\n    private _currentColor = 0;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public buildStart()\n    {\n        this._colorStack[0] = 0xF;\n        this._colorStackIndex = 1;\n        this._currentColor = 0xF;\n    }\n\n    public push(mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        const colorStack = this._colorStack;\n\n        colorStack[this._colorStackIndex] = colorStack[this._colorStackIndex - 1] & (mask as ColorMask).mask;\n\n        const currentColor = this._colorStack[this._colorStackIndex];\n\n        if (currentColor !== this._currentColor)\n        {\n            this._currentColor = currentColor;\n            instructionSet.add({\n                renderPipeId: 'colorMask',\n                colorMask: currentColor,\n                canBundle: false,\n            } as ColorMaskInstruction);\n        }\n\n        this._colorStackIndex++;\n    }\n\n    public pop(_mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        const colorStack = this._colorStack;\n\n        this._colorStackIndex--;\n\n        const currentColor = colorStack[this._colorStackIndex - 1];\n\n        if (currentColor !== this._currentColor)\n        {\n            this._currentColor = currentColor;\n\n            instructionSet.add({\n                renderPipeId: 'colorMask',\n                colorMask: currentColor,\n                canBundle: false,\n            } as ColorMaskInstruction);\n        }\n    }\n\n    public execute(instruction: ColorMaskInstruction)\n    {\n        const renderer = this._renderer;\n\n        renderer.colorMask.setMask(instruction.colorMask);\n    }\n\n    public destroy()\n    {\n        this._colorStack = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { CLEAR } from '../../renderers/gl/const';\nimport { STENCIL_MODES } from '../../renderers/shared/state/const';\n\nimport type { Container } from '../../../scene/container/Container';\nimport type { Effect } from '../../../scene/container/Effect';\nimport type { Instruction } from '../../renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../renderers/shared/Renderable';\nimport type { Renderer } from '../../renderers/types';\nimport type { StencilMask } from './StencilMask';\n\ntype MaskMode = 'pushMaskBegin' | 'pushMaskEnd' | 'popMaskBegin' | 'popMaskEnd';\n\nexport interface StencilMaskInstruction extends Instruction\n{\n    renderPipeId: 'stencilMask',\n    action: MaskMode,\n    inverse: boolean,\n    mask: StencilMask,\n}\n\nexport class StencilMaskPipe implements InstructionPipe<StencilMaskInstruction>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'stencilMask',\n    } as const;\n\n    private _renderer: Renderer;\n\n    // used when building and also when executing..\n    private _maskStackHash: Record<number, number> = {};\n\n    private _maskHash = new WeakMap<StencilMask, {\n        instructionsStart: number,\n        instructionsLength: number,\n    }>();\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public push(mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const effect = mask as StencilMask;\n\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        renderer.renderPipes.blendMode.setBlendMode(effect.mask as Renderable, 'none', instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'stencilMask',\n            action: 'pushMaskBegin',\n            mask,\n            inverse: _container._maskOptions.inverse,\n            canBundle: false,\n        } as StencilMaskInstruction);\n\n        const maskContainer = effect.mask;\n\n        maskContainer.includeInBuild = true;\n\n        if (!this._maskHash.has(effect))\n        {\n            this._maskHash.set(effect, {\n                instructionsStart: 0,\n                instructionsLength: 0,\n            });\n        }\n\n        const maskData = this._maskHash.get(effect);\n\n        maskData.instructionsStart = instructionSet.instructionSize;\n\n        maskContainer.collectRenderables(\n            instructionSet,\n            renderer,\n            null\n        );\n\n        maskContainer.includeInBuild = false;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'stencilMask',\n            action: 'pushMaskEnd',\n            mask,\n            inverse: _container._maskOptions.inverse,\n            canBundle: false,\n        } as StencilMaskInstruction);\n\n        const instructionsLength = instructionSet.instructionSize - maskData.instructionsStart - 1;\n\n        maskData.instructionsLength = instructionsLength;\n\n        const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n\n        this._maskStackHash[renderTargetUid] ??= 0;\n    }\n\n    public pop(mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const effect = mask as StencilMask;\n\n        const renderer = this._renderer;\n\n        // stencil is stored based on current render target..\n        renderer.renderPipes.batch.break(instructionSet);\n        renderer.renderPipes.blendMode.setBlendMode(effect.mask as Renderable, 'none', instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'stencilMask',\n            action: 'popMaskBegin',\n            inverse: _container._maskOptions.inverse,\n            canBundle: false,\n        } as StencilMaskInstruction);\n\n        const maskData = this._maskHash.get(mask as StencilMask);\n\n        for (let i = 0; i < maskData.instructionsLength; i++)\n        {\n            // eslint-disable-next-line max-len\n            instructionSet.instructions[instructionSet.instructionSize++] = instructionSet.instructions[maskData.instructionsStart++];\n        }\n\n        instructionSet.add({\n            renderPipeId: 'stencilMask',\n            action: 'popMaskEnd',\n            canBundle: false,\n        });\n    }\n\n    public execute(instruction: StencilMaskInstruction)\n    {\n        const renderer = this._renderer;\n        const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n\n        let maskStackIndex = this._maskStackHash[renderTargetUid] ??= 0;\n\n        if (instruction.action === 'pushMaskBegin')\n        {\n            // we create the depth and stencil buffers JIT\n            // as no point allocating the memory if we don't use it\n            renderer.renderTarget.ensureDepthStencil();\n\n            renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_ADD, maskStackIndex);\n\n            maskStackIndex++;\n\n            renderer.colorMask.setMask(0);\n        }\n        else if (instruction.action === 'pushMaskEnd')\n        {\n            if (instruction.inverse)\n            {\n                renderer.stencil.setStencilMode(STENCIL_MODES.INVERSE_MASK_ACTIVE, maskStackIndex);\n            }\n            else\n            {\n                renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n            }\n\n            renderer.colorMask.setMask(0xF);\n        }\n        else if (instruction.action === 'popMaskBegin')\n        {\n            renderer.colorMask.setMask(0);\n\n            if (maskStackIndex !== 0)\n            {\n                renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_REMOVE, maskStackIndex);\n            }\n            else\n            {\n                renderer.renderTarget.clear(null, CLEAR.STENCIL);\n                renderer.stencil.setStencilMode(STENCIL_MODES.DISABLED, maskStackIndex);\n            }\n\n            maskStackIndex--;\n        }\n        else if (instruction.action === 'popMaskEnd')\n        {\n            if (instruction.inverse)\n            {\n                renderer.stencil.setStencilMode(STENCIL_MODES.INVERSE_MASK_ACTIVE, maskStackIndex);\n            }\n            else\n            {\n                renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n            }\n\n            renderer.colorMask.setMask(0xF);\n        }\n\n        this._maskStackHash[renderTargetUid] = maskStackIndex;\n    }\n\n    public destroy()\n    {\n        this._renderer = null;\n        this._maskStackHash = null;\n        this._maskHash = null;\n    }\n}\n","import { Color } from '../../../../color/Color';\nimport { ExtensionType } from '../../../../extensions/Extensions';\n\nimport type { ColorSource, RgbaArray } from '../../../../color/Color';\nimport type { System } from '../system/System';\n\n/**\n * Options for the background system.\n * @property {ColorSource} [backgroundColor='black']\n * The background color used to clear the canvas. See {@link ColorSource} for accepted color values.\n * @property {ColorSource} [background] - Alias for backgroundColor\n * @property {number} [backgroundAlpha=1] -\n * Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n * @property {boolean} [clearBeforeRender=true] - Whether to clear the canvas before new render passes.\n * @memberof rendering\n */\nexport interface BackgroundSystemOptions\n{\n    /**\n     * The background color used to clear the canvas. See {@link ColorSource} for accepted color values.\n     * @memberof rendering.SharedRendererOptions\n     * @default 'black'\n     */\n    backgroundColor: ColorSource;\n    /**\n     * Alias for backgroundColor\n     * @memberof rendering.SharedRendererOptions\n     */\n    background?: ColorSource\n    /**\n     * Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n     * @memberof rendering.SharedRendererOptions\n     * @default 1\n     */\n    backgroundAlpha: number;\n    /**\n     * Whether to clear the canvas before new render passes.\n     * @memberof rendering.SharedRendererOptions\n     * @default true\n     */\n    clearBeforeRender: boolean;\n}\n\n/**\n * The background system manages the background color and alpha of the main view.\n * @memberof rendering\n */\nexport class BackgroundSystem implements System<BackgroundSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'background',\n        priority: 0,\n    } as const;\n\n    /** default options used by the system */\n    public static defaultOptions: BackgroundSystemOptions = {\n        /**\n         * {@link WebGLOptions.backgroundAlpha}\n         * @default 1\n         */\n        backgroundAlpha: 1,\n        /**\n         * {@link WebGLOptions.backgroundColor}\n         * @default 0x000000\n         */\n        backgroundColor: 0x0,\n        /**\n         * {@link WebGLOptions.clearBeforeRender}\n         * @default true\n         */\n        clearBeforeRender: true,\n    };\n\n    /**\n     * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.\n     * If the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every\n     * frame to set the canvas background color. If the scene is transparent PixiJS will use clearRect\n     * to clear the canvas every frame. Disable this by setting this to false. For example, if\n     * your game has a canvas filling background image you often don't need this set.\n     */\n    public clearBeforeRender: boolean;\n\n    private readonly _backgroundColor: Color;\n\n    constructor()\n    {\n        this.clearBeforeRender = true;\n\n        this._backgroundColor = new Color(0x000000);\n\n        this.color = this._backgroundColor; // run bg color setter\n        this.alpha = 1;\n    }\n\n    /**\n     * initiates the background system\n     * @param options - the options for the background colors\n     */\n    public init(options: BackgroundSystemOptions): void\n    {\n        options = { ...BackgroundSystem.defaultOptions, ...options };\n\n        this.clearBeforeRender = options.clearBeforeRender;\n        this.color = options.background || options.backgroundColor || this._backgroundColor; // run bg color setter\n        this.alpha = options.backgroundAlpha;\n\n        this._backgroundColor.setAlpha(options.backgroundAlpha);\n    }\n\n    /** The background color to fill if not transparent */\n    get color(): Color\n    {\n        return this._backgroundColor;\n    }\n\n    set color(value: ColorSource)\n    {\n        this._backgroundColor.setValue(value);\n    }\n\n    /** The background color alpha. Setting this to 0 will make the canvas transparent. */\n    get alpha(): number\n    {\n        return this._backgroundColor.alpha;\n    }\n\n    set alpha(value: number)\n    {\n        this._backgroundColor.setAlpha(value);\n    }\n\n    /** The background color as an [R, G, B, A] array. */\n    get colorRgba(): RgbaArray\n    {\n        return this._backgroundColor.toArray() as RgbaArray;\n    }\n\n    /**\n     * destroys the background system\n     * @internal\n     * @ignore\n     */\n    public destroy(): void\n    {\n        // No cleanup required\n    }\n}\n","import { extensions, ExtensionType } from '../../../../extensions/Extensions';\nimport { FilterEffect } from '../../../../filters/FilterEffect';\nimport { warn } from '../../../../utils/logging/warn';\n\nimport type { BlendModeFilter } from '../../../../filters/blend-modes/BlendModeFilter';\nimport type { FilterInstruction } from '../../../../filters/FilterSystem';\nimport type { Renderer } from '../../types';\nimport type { Instruction } from '../instructions/Instruction';\nimport type { InstructionSet } from '../instructions/InstructionSet';\nimport type { InstructionPipe } from '../instructions/RenderPipe';\nimport type { Renderable } from '../Renderable';\nimport type { BLEND_MODES } from '../state/const';\n\ninterface AdvancedBlendInstruction extends Instruction\n{\n    renderPipeId: 'blendMode',\n    blendMode: BLEND_MODES,\n    activeBlend: Renderable[],\n}\n\n// class map\nconst BLEND_MODE_FILTERS: Partial<Record<BLEND_MODES, new () => BlendModeFilter>> = {} as const;\n\nextensions.handle(ExtensionType.BlendMode, (value) =>\n{\n    if (!value.name)\n    {\n        throw new Error('BlendMode extension must have a name property');\n    }\n    BLEND_MODE_FILTERS[value.name as BLEND_MODES] = value.ref;\n}, (value) =>\n{\n    delete BLEND_MODE_FILTERS[value.name as BLEND_MODES];\n});\n\n/**\n * This Pipe handles the blend mode switching of the renderer.\n * It will insert instructions into the {@link renderers.InstructionSet} to switch the blend mode according to the\n * blend modes of the scene graph.\n *\n * This pipe is were wwe handle Advanced blend modes. Advanced blend modes essentially wrap the renderables\n * in a filter that applies the blend mode.\n *\n * You only need to use this class if you are building your own render instruction set rather than letting PixiJS build\n * the instruction set for you by traversing the scene graph\n * @memberof rendering\n */\nexport class BlendModePipe implements InstructionPipe<AdvancedBlendInstruction>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'blendMode',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private _renderableList: Renderable[];\n    private _activeBlendMode: BLEND_MODES;\n\n    private _isAdvanced = false;\n\n    private _filterHash: Partial<Record<BLEND_MODES, FilterEffect>> = Object.create(null);\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.runners.prerender.add(this);\n    }\n\n    public prerender()\n    {\n        // make sure we reset the blend modes to normal\n        // this way the next render will register any changes\n        this._activeBlendMode = 'normal';\n        this._isAdvanced = false;\n    }\n\n    /**\n     * This ensures that a blendMode switch is added to the instruction set if the blend mode has changed.\n     * @param renderable - The renderable we are adding to the instruction set\n     * @param blendMode - The blend mode of the renderable\n     * @param instructionSet - The instruction set we are adding to\n     */\n    public setBlendMode(renderable: Renderable, blendMode: BLEND_MODES, instructionSet: InstructionSet)\n    {\n        if (this._activeBlendMode === blendMode)\n        {\n            if (this._isAdvanced) this._renderableList.push(renderable);\n\n            return;\n        }\n\n        this._activeBlendMode = blendMode;\n\n        if (this._isAdvanced)\n        {\n            this._endAdvancedBlendMode(instructionSet);\n        }\n\n        this._isAdvanced = !!BLEND_MODE_FILTERS[blendMode];\n\n        if (this._isAdvanced)\n        {\n            this._beginAdvancedBlendMode(instructionSet);\n\n            this._renderableList.push(renderable);\n        }\n    }\n\n    private _beginAdvancedBlendMode(instructionSet: InstructionSet)\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        const blendMode = this._activeBlendMode;\n\n        if (!BLEND_MODE_FILTERS[blendMode as keyof typeof BLEND_MODE_FILTERS])\n        {\n            // #if _DEBUG\n            warn(`Unable to assign BlendMode: '${blendMode}'. `\n            + `You may want to include: import 'pixi.js/advanced-blend-modes'`);\n            // #endif\n\n            return;\n        }\n\n        let filterEffect = this._filterHash[blendMode];\n\n        // this does need an execute?\n        if (!filterEffect)\n        {\n            filterEffect = this._filterHash[blendMode] = new FilterEffect();\n\n            filterEffect.filters = [new BLEND_MODE_FILTERS[blendMode as keyof typeof BLEND_MODE_FILTERS]()];\n        }\n\n        const instruction: FilterInstruction = {\n            renderPipeId: 'filter',\n            action: 'pushFilter',\n            renderables: [],\n            filterEffect,\n            canBundle: false,\n        };\n\n        this._renderableList = instruction.renderables;\n        instructionSet.add(instruction);\n    }\n\n    private _endAdvancedBlendMode(instructionSet: InstructionSet)\n    {\n        this._renderableList = null;\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            action: 'popFilter',\n            canBundle: false,\n        });\n    }\n\n    /**\n     * called when the instruction build process is starting this will reset internally to the default blend mode\n     * @internal\n     * @ignore\n     */\n    public buildStart()\n    {\n        this._isAdvanced = false;\n    }\n\n    /**\n     * called when the instruction build process is finished, ensuring that if there is an advanced blend mode\n     * active, we add the final render instructions added to the instruction set\n     * @param instructionSet - The instruction set we are adding to\n     * @internal\n     * @ignore\n     */\n    public buildEnd(instructionSet: InstructionSet)\n    {\n        if (this._isAdvanced)\n        {\n            this._endAdvancedBlendMode(instructionSet);\n        }\n    }\n\n    /**\n     * @internal\n     * @ignore\n     */\n    public destroy()\n    {\n        this._renderer = null;\n        this._renderableList = null;\n\n        for (const i in this._filterHash)\n        {\n            this._filterHash[i as BLEND_MODES].destroy();\n        }\n\n        this._filterHash = null;\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { Container } from '../../../../scene/container/Container';\nimport { Texture } from '../texture/Texture';\n\nimport type { ColorSource } from '../../../../color/Color';\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\nimport type { GetPixelsOutput } from '../texture/GenerateCanvas';\nimport type { GenerateTextureOptions } from './GenerateTextureSystem';\n\nconst imageTypes = {\n    png: 'image/png',\n    jpg: 'image/jpeg',\n    webp: 'image/webp',\n};\n\ntype Formats = keyof typeof imageTypes;\n\n/**\n * Options for creating an image from a renderer.\n * @memberof rendering\n */\nexport interface ImageOptions\n{\n    /** The format of the image. */\n    format?: Formats;\n    /** The quality of the image. */\n    quality?: number;\n}\n\n/**\n * Options for extracting content from a renderer.\n * @memberof rendering\n */\nexport interface BaseExtractOptions\n{\n    /** The target to extract. */\n    target: Container | Texture;\n    /** The region of the target to extract. */\n    frame?: Rectangle;\n    /** The resolution of the extracted content. */\n    resolution?: number;\n    /** The color used to clear the extracted content. */\n    clearColor?: ColorSource;\n    /** Whether to enable anti-aliasing. This may affect performance. */\n    antialias?: boolean;\n}\n/**\n * Options for extracting an HTMLImage from the renderer.\n * @memberof rendering\n */\nexport type ExtractImageOptions = BaseExtractOptions & ImageOptions;\n/**\n * Options for extracting and downloading content from a renderer.\n * @memberof rendering\n */\nexport type ExtractDownloadOptions = BaseExtractOptions & {\n    /** The filename to use when downloading the content. */\n    filename: string;\n};\n/**\n * Options for extracting content from a renderer.\n * @memberof rendering\n */\nexport type ExtractOptions = BaseExtractOptions | ExtractImageOptions | ExtractDownloadOptions;\n\n/**\n * This class provides renderer-specific plugins for exporting content from a renderer.\n * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.extract` property.\n * @example\n * import { Application, Graphics } from 'pixi.js';\n *\n * // Create a new application (extract will be auto-added to renderer)\n * const app = new Application();\n * await app.init();\n *\n * // Draw a red circle\n * const graphics = new Graphics()\n *     .circle(0, 0, 50);\n *     .fill(0xFF0000)\n *\n * // Render the graphics as an HTMLImageElement\n * const image = await app.renderer.extract.image(graphics);\n * document.body.appendChild(image);\n * @memberof rendering\n */\nexport class ExtractSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'extract',\n    } as const;\n\n    /** Default options for creating an image. */\n    public static defaultImageOptions: ImageOptions = {\n        /** The format of the image. */\n        format: 'png' as Formats,\n        /** The quality of the image. */\n        quality: 1,\n    };\n\n    private _renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    private _normalizeOptions<T extends ExtractOptions>(\n        options: ExtractImageOptions | Container | Texture,\n        defaults: Partial<T> = {},\n    ): T\n    {\n        if (options instanceof Container || options instanceof Texture)\n        {\n            return {\n                target: options,\n                ...defaults\n            } as T;\n        }\n\n        return {\n            ...defaults,\n            ...options,\n        } as T;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     * @param options - The options for creating the image, or the target to extract\n     * @returns - HTML Image of the target\n     */\n    public async image(options: ExtractImageOptions | Container | Texture): Promise<HTMLImageElement>\n    {\n        const image = new Image();\n\n        image.src = await this.base64(options);\n\n        return image;\n    }\n\n    /**\n     * Will return a base64 encoded string of this target. It works by calling\n     * `Extract.canvas` and then running toDataURL on that.\n     * @param options - The options for creating the image, or the target to extract\n     */\n    public async base64(options: ExtractImageOptions | Container | Texture): Promise<string>\n    {\n        options = this._normalizeOptions<ExtractImageOptions>(\n            options,\n            ExtractSystem.defaultImageOptions\n        );\n\n        const { format, quality } = options;\n\n        const canvas = this.canvas(options);\n\n        if (canvas.toBlob !== undefined)\n        {\n            return new Promise<string>((resolve, reject) =>\n            {\n                canvas.toBlob!((blob) =>\n                {\n                    if (!blob)\n                    {\n                        reject(new Error('ICanvas.toBlob failed!'));\n\n                        return;\n                    }\n\n                    const reader = new FileReader();\n\n                    reader.onload = () => resolve(reader.result as string);\n                    reader.onerror = reject;\n                    reader.readAsDataURL(blob);\n                }, imageTypes[format], quality);\n            });\n        }\n        if (canvas.toDataURL !== undefined)\n        {\n            return canvas.toDataURL(imageTypes[format], quality);\n        }\n        if (canvas.convertToBlob !== undefined)\n        {\n            const blob = await canvas.convertToBlob({ type: imageTypes[format], quality });\n\n            return new Promise<string>((resolve, reject) =>\n            {\n                const reader = new FileReader();\n\n                reader.onload = () => resolve(reader.result as string);\n                reader.onerror = reject;\n                reader.readAsDataURL(blob);\n            });\n        }\n\n        throw new Error('Extract.base64() requires ICanvas.toDataURL, ICanvas.toBlob, '\n            + 'or ICanvas.convertToBlob to be implemented');\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     * @param options - The options for creating the canvas, or the target to extract\n     * @returns - A Canvas element with the texture rendered on.\n     */\n    public canvas(options: ExtractOptions | Container | Texture): ICanvas\n    {\n        options = this._normalizeOptions(options);\n\n        const target = options.target;\n\n        const renderer = this._renderer;\n\n        if (target instanceof Texture)\n        {\n            return renderer.texture.generateCanvas(target);\n        }\n\n        const texture = renderer.textureGenerator.generateTexture(options as GenerateTextureOptions);\n\n        const canvas = renderer.texture.generateCanvas(texture);\n\n        texture.destroy(true);\n\n        return canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     * @param options - The options for extracting the image, or the target to extract\n     * @returns - One-dimensional array containing the pixel data of the entire texture\n     */\n    public pixels(options: ExtractOptions | Container | Texture): GetPixelsOutput\n    {\n        options = this._normalizeOptions(options);\n\n        const target = options.target;\n\n        const renderer = this._renderer;\n        const texture = target instanceof Texture\n            ? target\n            : renderer.textureGenerator.generateTexture(options as GenerateTextureOptions);\n\n        const pixelInfo = renderer.texture.getPixels(texture);\n\n        if (target instanceof Container)\n        {\n            // destroy generated texture\n            texture.destroy(true);\n        }\n\n        return pixelInfo;\n    }\n\n    /**\n     * Will return a texture of the target\n     * @param options - The options for creating the texture, or the target to extract\n     * @returns - A texture of the target\n     */\n    public texture(options: ExtractOptions | Container | Texture): Texture\n    {\n        options = this._normalizeOptions(options);\n\n        if (options.target instanceof Texture) return options.target;\n\n        return this._renderer.textureGenerator.generateTexture(options as GenerateTextureOptions);\n    }\n\n    /**\n     * Will extract a HTMLImage of the target and download it\n     * @param options - The options for downloading and extracting the image, or the target to extract\n     */\n    public download(options: ExtractDownloadOptions | Container | Texture)\n    {\n        options = this._normalizeOptions<ExtractDownloadOptions>(options);\n\n        const canvas = this.canvas(options);\n\n        const link = document.createElement('a');\n\n        link.download = options.filename ?? 'image.png';\n        link.href = canvas.toDataURL('image/png');\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    }\n\n    /**\n     * Logs the target to the console as an image. This is a useful way to debug what's happening in the renderer.\n     * @param options - The options for logging the image, or the target to log\n     */\n    public log(options: (ExtractOptions & {width?: number}) | Container | Texture)\n    {\n        const width = options.width ?? 200;\n\n        options = this._normalizeOptions(options);\n\n        const canvas = this.canvas(options);\n\n        const base64 = canvas.toDataURL();\n\n        // eslint-disable-next-line no-console\n        console.log(`[Pixi Texture] ${canvas.width}px ${canvas.height}px`);\n\n        const style = [\n            'font-size: 1px;',\n            `padding: ${width}px ${300}px;`,\n            `background: url(${base64}) no-repeat;`,\n            'background-size: contain;',\n        ].join(' ');\n\n        // eslint-disable-next-line no-console\n        console.log('%c ', style);\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null as any as Renderer;\n    }\n}\n","import { TextureSource } from './sources/TextureSource';\nimport { Texture } from './Texture';\n\nimport type { TextureSourceOptions } from './sources/TextureSource';\n\n/**\n * A render texture, extends `Texture`.\n * @see {@link rendering.Texture}\n * @memberof rendering\n */\nexport class RenderTexture extends Texture\n{\n    public static create(options: TextureSourceOptions): RenderTexture\n    {\n        return new RenderTexture({\n            source: new TextureSource(options)\n        });\n    }\n\n    /**\n     * Resizes the render texture.\n     * @param width - The new width of the render texture.\n     * @param height - The new height of the render texture.\n     * @param resolution - The new resolution of the render texture.\n     * @returns This texture.\n     */\n    public resize(width: number, height: number, resolution?: number): this\n    {\n        this.source.resize(width, height, resolution);\n\n        return this;\n    }\n}\n","import { Color, type ColorSource } from '../../../../color/Color';\nimport { ExtensionType } from '../../../../extensions/Extensions';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { Bounds } from '../../../../scene/container/bounds/Bounds';\nimport { getLocalBounds } from '../../../../scene/container/bounds/getLocalBounds';\nimport { Container } from '../../../../scene/container/Container';\nimport { RenderTexture } from '../texture/RenderTexture';\n\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\nimport type { TextureSourceOptions } from '../texture/sources/TextureSource';\n\nexport type GenerateTextureSourceOptions = Omit<TextureSourceOptions, 'resource' | 'width' | 'height' | 'resolution'>;\n\n/**\n * Options for generating a texture from a container.\n * @memberof rendering\n */\nexport type GenerateTextureOptions =\n{\n    /** The container to generate the texture from */\n    target: Container;\n    /**\n     * The region of the container, that shall be rendered,\n     * if no region is specified, defaults to the local bounds of the container.\n     */\n    frame?: Rectangle;\n    /** The resolution of the texture being generated. */\n    resolution?: number;\n    /** The color used to clear the texture. */\n    clearColor?: ColorSource;\n    /** Whether to enable anti-aliasing. This may affect performance. */\n    antialias?: boolean;\n    /** The options passed to the texture source. */\n    textureSourceOptions?: GenerateTextureSourceOptions,\n};\n\nconst tempRect = new Rectangle();\nconst tempBounds = new Bounds();\nconst noColor: ColorSource = [0, 0, 0, 0];\n\n/**\n * System that manages the generation of textures from the renderer\n *\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.textureGenerator` property.\n * @memberof rendering\n */\nexport class GenerateTextureSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'textureGenerator',\n    } as const;\n\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    /**\n     * A Useful function that returns a texture of the display object that can then be used to create sprites\n     * This can be quite useful if your container is complicated and needs to be reused multiple times.\n     * @param {GenerateTextureOptions | Container} options - Generate texture options.\n     * @param {Container} [options.container] - If not given, the renderer's resolution is used.\n     * @param {Rectangle} options.region - The region of the container, that shall be rendered,\n     * @param {number} [options.resolution] - The resolution of the texture being generated.\n     *        if no region is specified, defaults to the local bounds of the container.\n     * @param {GenerateTextureSourceOptions} [options.textureSourceOptions] - Texture options for GPU.\n     * @returns a shiny new texture of the container passed in\n     */\n    public generateTexture(options: GenerateTextureOptions | Container): RenderTexture\n    {\n        if (options instanceof Container)\n        {\n            options = {\n                target: options,\n                frame: undefined,\n                textureSourceOptions: {},\n                resolution: undefined,\n            };\n        }\n\n        const resolution = options.resolution || this._renderer.resolution;\n        const antialias = options.antialias || this._renderer.view.antialias;\n\n        const container = options.target;\n\n        let clearColor = options.clearColor;\n\n        if (clearColor)\n        {\n            const isRGBAArray = Array.isArray(clearColor) && clearColor.length === 4;\n\n            clearColor = isRGBAArray ? clearColor : Color.shared.setValue(clearColor).toArray();\n        }\n        else\n        {\n            clearColor = noColor;\n        }\n\n        const region = options.frame?.copyTo(tempRect)\n            || getLocalBounds(container, tempBounds).rectangle;\n\n        region.width = Math.max(region.width, 1 / resolution) | 0;\n        region.height = Math.max(region.height, 1 / resolution) | 0;\n\n        const target = RenderTexture.create({\n            ...options.textureSourceOptions,\n            width: region.width,\n            height: region.height,\n            resolution,\n            antialias,\n        });\n\n        const transform = Matrix.shared.translate(-region.x, -region.y);\n\n        this._renderer.render({\n            container,\n            transform,\n            target,\n            clearColor,\n        });\n\n        target.source.updateMipmaps();\n\n        return target;\n    }\n\n    public destroy(): void\n    {\n        (this._renderer as null) = null;\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Point } from '../../../../maths/point/Point';\nimport { color32BitToUniform } from '../../../../scene/graphics/gpu/colorToUniform';\nimport { BindGroup } from '../../gpu/shader/BindGroup';\nimport { type Renderer, RendererType } from '../../types';\nimport { UniformGroup } from '../shader/UniformGroup';\n\nimport type { PointData } from '../../../../maths/point/PointData';\nimport type { GlRenderTargetSystem } from '../../gl/renderTarget/GlRenderTargetSystem';\nimport type { GpuRenderTargetSystem } from '../../gpu/renderTarget/GpuRenderTargetSystem';\nimport type { WebGPURenderer } from '../../gpu/WebGPURenderer';\nimport type { UboSystem } from '../shader/UboSystem';\nimport type { System } from '../system/System';\n\nexport type GlobalUniformGroup = UniformGroup<{\n    uProjectionMatrix: { value: Matrix; type: 'mat3x3<f32>' }\n    uWorldTransformMatrix: { value: Matrix; type: 'mat3x3<f32>' }\n    uWorldColorAlpha: { value: Float32Array; type: 'vec4<f32>' }\n    uResolution: { value: number[]; type: 'vec2<f32>' }\n}>;\n\nexport interface GlobalUniformOptions\n{\n    size?: number[],\n    projectionMatrix?: Matrix,\n    worldTransformMatrix?: Matrix\n    worldColor?: number\n    offset?: PointData\n}\n\nexport interface GlobalUniformData\n{\n    projectionMatrix: Matrix\n    worldTransformMatrix: Matrix\n    worldColor: number\n    resolution: number[]\n    offset: PointData\n    bindGroup: BindGroup\n}\n\nexport interface GlobalUniformRenderer\n{\n    renderTarget: GlRenderTargetSystem | GpuRenderTargetSystem\n    renderPipes: Renderer['renderPipes'];\n    ubo: UboSystem;\n    type: RendererType;\n}\n\n/**\n * System plugin to the renderer to manage global uniforms for the renderer.\n * @memberof rendering\n */\nexport class GlobalUniformSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'globalUniforms',\n    } as const;\n\n    private readonly _renderer: GlobalUniformRenderer;\n\n    private _stackIndex = 0;\n    private _globalUniformDataStack: GlobalUniformData[] = [];\n\n    private readonly _uniformsPool: GlobalUniformGroup[] = [];\n    private readonly _activeUniforms: GlobalUniformGroup[] = [];\n\n    private readonly _bindGroupPool: BindGroup[] = [];\n    private readonly _activeBindGroups: BindGroup[] = [];\n\n    private _currentGlobalUniformData: GlobalUniformData;\n\n    constructor(renderer: GlobalUniformRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public reset()\n    {\n        this._stackIndex = 0;\n\n        for (let i = 0; i < this._activeUniforms.length; i++)\n        {\n            this._uniformsPool.push(this._activeUniforms[i]);\n        }\n\n        for (let i = 0; i < this._activeBindGroups.length; i++)\n        {\n            this._bindGroupPool.push(this._activeBindGroups[i]);\n        }\n\n        this._activeUniforms.length = 0;\n        this._activeBindGroups.length = 0;\n    }\n\n    public start(options: GlobalUniformOptions): void\n    {\n        this.reset();\n\n        this.push(options);\n    }\n\n    public bind({\n        size,\n        projectionMatrix,\n        worldTransformMatrix,\n        worldColor,\n        offset,\n    }: GlobalUniformOptions)\n    {\n        const renderTarget = this._renderer.renderTarget.renderTarget;\n\n        const currentGlobalUniformData = this._stackIndex ? this._globalUniformDataStack[this._stackIndex - 1] : {\n            projectionData: renderTarget,\n            worldTransformMatrix: new Matrix(),\n            worldColor: 0xFFFFFFFF,\n            offset: new Point(),\n        };\n\n        const globalUniformData: GlobalUniformData = {\n            projectionMatrix: projectionMatrix || this._renderer.renderTarget.projectionMatrix,\n            resolution: size || renderTarget.size,\n            worldTransformMatrix: worldTransformMatrix || currentGlobalUniformData.worldTransformMatrix,\n            worldColor: worldColor || currentGlobalUniformData.worldColor,\n            offset: offset || currentGlobalUniformData.offset,\n            bindGroup: null,\n        };\n\n        const uniformGroup = this._uniformsPool.pop() || this._createUniforms();\n\n        this._activeUniforms.push(uniformGroup);\n\n        const uniforms = uniformGroup.uniforms;\n\n        uniforms.uProjectionMatrix = globalUniformData.projectionMatrix;\n\n        uniforms.uResolution = globalUniformData.resolution;\n\n        uniforms.uWorldTransformMatrix.copyFrom(globalUniformData.worldTransformMatrix);\n\n        uniforms.uWorldTransformMatrix.tx -= globalUniformData.offset.x;\n        uniforms.uWorldTransformMatrix.ty -= globalUniformData.offset.y;\n\n        color32BitToUniform(\n            globalUniformData.worldColor,\n            uniforms.uWorldColorAlpha,\n            0\n        );\n\n        uniformGroup.update();\n\n        let bindGroup: BindGroup;\n\n        if ((this._renderer as WebGPURenderer).renderPipes.uniformBatch)\n        {\n            bindGroup = (this._renderer as WebGPURenderer).renderPipes.uniformBatch.getUniformBindGroup(uniformGroup, false);\n        }\n        else\n        {\n            bindGroup = this._bindGroupPool.pop() || new BindGroup();\n            this._activeBindGroups.push(bindGroup);\n            bindGroup.setResource(uniformGroup, 0);\n        }\n\n        globalUniformData.bindGroup = bindGroup;\n\n        this._currentGlobalUniformData = globalUniformData;\n    }\n\n    public push(options: GlobalUniformOptions)\n    {\n        this.bind(options);\n\n        this._globalUniformDataStack[this._stackIndex++] = this._currentGlobalUniformData;\n    }\n\n    public pop()\n    {\n        this._currentGlobalUniformData = this._globalUniformDataStack[--this._stackIndex - 1];\n\n        // for webGL we need to update the uniform group here\n        // as we are not using bind groups\n        if (this._renderer.type === RendererType.WEBGL)\n        {\n            (this._currentGlobalUniformData.bindGroup.resources[0] as UniformGroup).update();\n        }\n    }\n\n    get bindGroup(): BindGroup\n    {\n        return this._currentGlobalUniformData.bindGroup;\n    }\n\n    get globalUniformData()\n    {\n        return this._currentGlobalUniformData;\n    }\n\n    get uniformGroup()\n    {\n        return this._currentGlobalUniformData.bindGroup.resources[0] as UniformGroup;\n    }\n\n    private _createUniforms(): GlobalUniformGroup\n    {\n        const globalUniforms = new UniformGroup({\n            uProjectionMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uWorldTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            // TODO - someone smart - set this to be a unorm8x4 rather than a vec4<f32>\n            uWorldColorAlpha: { value: new Float32Array(4), type: 'vec4<f32>' },\n            uResolution: { value: [0, 0], type: 'vec2<f32>' },\n        }, {\n            isStatic: true,\n        });\n\n        return globalUniforms;\n    }\n\n    public destroy()\n    {\n        (this._renderer as null) = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { Ticker } from '../../../ticker/Ticker';\n\nimport type { System } from './system/System';\n\n// start at one too keep it positive!\nlet uid = 1;\n\n/**\n * The SchedulerSystem manages scheduled tasks with specific intervals.\n * @memberof rendering\n */\nexport class SchedulerSystem implements System<null>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'scheduler',\n        priority: 0,\n    } as const;\n\n    private readonly _tasks: {\n        func: (elapsed: number) => void;\n        duration: number;\n        offset: number\n        start: number;\n        last: number;\n        repeat: boolean;\n        id: number;\n    }[] = [];\n\n    /** a small off set to apply to the repeat schedules. This is just to make sure they run at slightly different times */\n    private _offset = 0;\n\n    /** Initializes the scheduler system and starts the ticker. */\n    public init(): void\n    {\n        Ticker.system.add(this._update, this);\n    }\n\n    /**\n     * Schedules a repeating task.\n     * @param func - The function to execute.\n     * @param duration - The interval duration in milliseconds.\n     * @param useOffset - this will spread out tasks so that they do not all run at the same time\n     * @returns The unique identifier for the scheduled task.\n     */\n    public repeat(func: (elapsed: number) => void, duration: number, useOffset = true): number\n    {\n        const id = uid++;\n\n        let offset = 0;\n\n        if (useOffset)\n        {\n            this._offset += 1000;\n            offset = this._offset;\n        }\n\n        this._tasks.push({\n            func,\n            duration,\n            start: performance.now(),\n            offset,\n            last: performance.now(),\n            repeat: true,\n            id\n        });\n\n        return id;\n    }\n\n    /**\n     * Cancels a scheduled task.\n     * @param id - The unique identifier of the task to cancel.\n     */\n    public cancel(id: number): void\n    {\n        for (let i = 0; i < this._tasks.length; i++)\n        {\n            if (this._tasks[i].id === id)\n            {\n                this._tasks.splice(i, 1);\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Updates and executes the scheduled tasks.\n     * @private\n     */\n    private _update(): void\n    {\n        const now = performance.now();\n\n        for (let i = 0; i < this._tasks.length; i++)\n        {\n            const task = this._tasks[i];\n\n            if ((now - task.offset) - task.last >= task.duration)\n            {\n                const elapsed = now - task.start;\n\n                task.func(elapsed);\n                task.last = now;\n            }\n        }\n    }\n\n    /**\n     * Destroys the scheduler system and removes all tasks.\n     * @internal\n     * @ignore\n     */\n    public destroy(): void\n    {\n        Ticker.system.remove(this._update, this);\n\n        this._tasks.length = 0;\n    }\n}\n","import { DOMAdapter } from '../environment/adapter';\nimport { VERSION } from './const';\n\nlet saidHello = false;\n\n/**\n * Prints out the version and renderer information for this running instance of PixiJS.\n * @param type - The name of the renderer this instance is using.\n * @returns {void}\n */\nexport function sayHello(type: string): void\n{\n    if (saidHello)\n    {\n        return;\n    }\n\n    if (DOMAdapter.get().getNavigator().userAgent.toLowerCase().indexOf('chrome') > -1)\n    {\n        const args = [\n            `%c  %c  %c  %c  %c PixiJS %c v${VERSION} (${type}) http://www.pixijs.com/\\n\\n`,\n            'background: #E72264; padding:5px 0;',\n            'background: #6CA2EA; padding:5px 0;',\n            'background: #B5D33D; padding:5px 0;',\n            'background: #FED23F; padding:5px 0;',\n            'color: #FFFFFF; background: #E72264; padding:5px 0;',\n            'color: #E72264; background: #FFFFFF; padding:5px 0;',\n        ];\n\n        globalThis.console.log(...args);\n    }\n    else if (globalThis.console)\n    {\n        globalThis.console.log(`PixiJS ${VERSION} - ${type} - http://www.pixijs.com/`);\n    }\n\n    saidHello = true;\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { sayHello } from '../../../../utils/sayHello';\nimport { type Renderer, RendererType } from '../../types';\n\nimport type { WebGLRenderer } from '../../gl/WebGLRenderer';\nimport type { System } from '../system/System';\n\n/**\n * Options for the startup system.\n * @property {boolean} [hello=false] - Whether to log the version and type information of renderer to console.\n * @memberof rendering\n */\nexport interface HelloSystemOptions\n{\n    /**\n     * Whether to log the version and type information of renderer to console.\n     * @memberof rendering.SharedRendererOptions\n     * @default false\n     */\n    hello: boolean;\n}\n\n/**\n * A simple system responsible for initiating the renderer.\n * @memberof rendering\n */\nexport class HelloSystem implements System<HelloSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'hello',\n        priority: -2,\n    } as const;\n\n    /** The default options for the system. */\n    public static defaultOptions: HelloSystemOptions = {\n        /** {@link WebGLOptions.hello} */\n        hello: false,\n    };\n\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    /**\n     * It all starts here! This initiates every system, passing in the options for any system by name.\n     * @param options - the config for the renderer and all its systems\n     */\n    public init(options: HelloSystemOptions): void\n    {\n        if (options.hello)\n        {\n            let name = this._renderer.name;\n\n            if (this._renderer.type === RendererType.WEBGL)\n            {\n                name += ` ${(this._renderer as WebGLRenderer).context.webGLVersion}`;\n            }\n\n            sayHello(name);\n        }\n    }\n}\n","/**\n * Takes a hash and removes all the `undefined`/`null` values from it.\n * In PixiJS, we tend to null properties instead of using 'delete' for performance reasons.\n * However, in some cases, this could be a problem if the hash grows too large over time,\n * this function can be used to clean a hash.\n * @param hash - The hash to clean.\n * @returns A new hash with all the `undefined`/`null` values removed.\n * @memberof utils\n */\nexport function cleanHash<T>(hash: Record<string, T>): Record<string, T>\n{\n    let clean = false;\n\n    for (const i in hash)\n    {\n        // eslint-disable-next-line eqeqeq\n        if (hash[i] == undefined)\n        {\n            clean = true;\n            break;\n        }\n    }\n\n    if (!clean) return hash;\n\n    const cleanHash = Object.create(null);\n\n    for (const i in hash)\n    {\n        const value = hash[i];\n\n        if (value)\n        {\n            cleanHash[i] = value;\n        }\n    }\n\n    return cleanHash;\n}\n\n/**\n * Removes all `undefined`/`null` elements from the given array and compacts the array.\n *\n * This function iterates through the array, shifting non-undefined elements to the left\n * to fill gaps created by `undefined` elements. The length of the array is then adjusted\n * to remove the trailing `undefined` elements.\n * @param arr - The array to be cleaned.\n * @returns The cleaned array with all `undefined` elements removed.\n * @example\n * // Example usage:\n * const arr = [1, undefined, 2, undefined, 3];\n * const cleanedArr = cleanArray(arr);\n * console.log(cleanedArr); // Output: [1, 2, 3]\n * @memberof utils\n */\nexport function cleanArray<T>(arr: T[]): T[]\n{\n    let offset = 0;\n\n    for (let i = 0; i < arr.length; i++)\n    {\n        // eslint-disable-next-line eqeqeq\n        if (arr[i] == undefined)\n        {\n            offset++;\n        }\n        else\n        {\n            arr[i - offset] = arr[i];\n        }\n    }\n\n    arr.length -= offset;\n\n    return arr;\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { type RenderGroup } from '../../../../scene/container/RenderGroup';\nimport { cleanArray, cleanHash } from '../../../../utils/data/clean';\nimport { type RenderOptions } from '../system/AbstractRenderer';\n\nimport type { Container } from '../../../../scene/container/Container';\nimport type { Renderer } from '../../types';\nimport type { RenderPipe } from '../instructions/RenderPipe';\nimport type { Renderable } from '../Renderable';\nimport type { System } from '../system/System';\n\nlet renderableGCTick = 0;\n\n/**\n * Options for the {@link RenderableGCSystem}.\n * @memberof rendering\n * @property {boolean} [renderableGCActive=true] - If set to true, this will enable the garbage collector on the renderables.\n * @property {number} [renderableGCAMaxIdle=60000] -\n * The maximum idle frames before a texture is destroyed by garbage collection.\n * @property {number} [renderableGCCheckCountMax=60000] - time between two garbage collections.\n */\nexport interface RenderableGCSystemOptions\n{\n    /**\n     * If set to true, this will enable the garbage collector on the GPU.\n     * @default true\n     * @memberof rendering.SharedRendererOptions\n     */\n    renderableGCActive: boolean;\n    /**\n     * The maximum idle frames before a texture is destroyed by garbage collection.\n     * @default 60 * 60\n     * @memberof rendering.SharedRendererOptions\n     */\n    renderableGCMaxUnusedTime: number;\n    /**\n     * Frames between two garbage collections.\n     * @default 600\n     * @memberof rendering.SharedRendererOptions\n     */\n    renderableGCFrequency: number;\n}\n\n/**\n * The RenderableGCSystem is responsible for cleaning up GPU resources that are no longer being used.\n *\n * When rendering objects like sprites, text, etc - GPU resources are created and managed by the renderer.\n * If these objects are no longer needed but not properly destroyed (via sprite.destroy()), their GPU resources\n * would normally leak. This system prevents that by automatically cleaning up unused GPU resources.\n *\n * Key features:\n * - Runs every 30 seconds by default to check for unused resources\n * - Cleans up resources not rendered for over 1 minute\n * - Works independently of rendering - will clean up even when not actively rendering\n * - When cleaned up resources are needed again, new GPU objects are quickly assigned from a pool\n * - Can be disabled with renderableGCActive:false for manual control\n *\n * Best practices:\n * - Always call destroy() explicitly when done with renderables (e.g. sprite.destroy())\n * - This system is a safety net, not a replacement for proper cleanup\n * - Adjust frequency and timeouts via options if needed\n *\n * Example:\n * ```js\n * // Sprite created but reference lost without destroy\n * let sprite = new Sprite(texture);\n *\n * // internally the renderer will assign a resource to the sprite\n * renderer.render(sprite);\n *\n * sprite = null; // Reference lost but GPU resources still exist\n *\n * // After 1 minute of not being rendered:\n * // - RenderableGC will clean up the sprite's GPU resources\n * // - JS garbage collector can then clean up the sprite itself\n * ```\n * @implements {System<RenderableGCSystemOptions>}\n */\nexport class RenderableGCSystem implements System<RenderableGCSystemOptions>\n{\n    /**\n     * Extension metadata for registering this system with the renderer.\n     * @ignore\n     */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'renderableGC',\n        priority: 0\n    } as const;\n\n    /**\n     * Default configuration options for the garbage collection system.\n     * These can be overridden when initializing the renderer.\n     */\n    public static defaultOptions: RenderableGCSystemOptions = {\n        /** Enable/disable the garbage collector */\n        renderableGCActive: true,\n        /** Time in ms before an unused resource is collected (default 1 minute) */\n        renderableGCMaxUnusedTime: 60000,\n        /** How often to run garbage collection in ms (default 30 seconds) */\n        renderableGCFrequency: 30000,\n    };\n\n    /** Maximum time in ms a resource can be unused before being garbage collected */\n    public maxUnusedTime: number;\n\n    /** Reference to the renderer this system belongs to */\n    private _renderer: Renderer;\n\n    /** Array of renderables being tracked for garbage collection */\n    private readonly _managedRenderables: Renderable[] = [];\n    /** ID of the main GC scheduler handler */\n    private _handler: number;\n    /** How frequently GC runs in ms */\n    private _frequency: number;\n    /** Current timestamp used for age calculations */\n    private _now: number;\n\n    /** Array of hash objects being tracked for cleanup */\n    private readonly _managedHashes: {context: any, hash: string}[] = [];\n    /** ID of the hash cleanup scheduler handler */\n    private _hashHandler: number;\n\n    /** Array of arrays being tracked for cleanup */\n    private readonly _managedArrays: {context: any, hash: string}[] = [];\n    /** ID of the array cleanup scheduler handler */\n    private _arrayHandler: number;\n\n    /**\n     * Creates a new RenderableGCSystem instance.\n     * @param renderer - The renderer this garbage collection system works for\n     */\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    /**\n     * Initializes the garbage collection system with the provided options.\n     * @param options - Configuration options for the renderer\n     */\n    public init(options: RenderableGCSystemOptions): void\n    {\n        options = { ...RenderableGCSystem.defaultOptions, ...options };\n\n        this.maxUnusedTime = options.renderableGCMaxUnusedTime;\n        this._frequency = options.renderableGCFrequency;\n\n        this.enabled = options.renderableGCActive;\n    }\n\n    /**\n     * Gets whether the garbage collection system is currently enabled.\n     * @returns True if GC is enabled, false otherwise\n     */\n    get enabled(): boolean\n    {\n        return !!this._handler;\n    }\n\n    /**\n     * Enables or disables the garbage collection system.\n     * When enabled, schedules periodic cleanup of resources.\n     * When disabled, cancels all scheduled cleanups.\n     */\n    set enabled(value: boolean)\n    {\n        if (this.enabled === value) return;\n\n        if (value)\n        {\n            // Schedule periodic garbage collection\n            this._handler = this._renderer.scheduler.repeat(\n                () => this.run(),\n                this._frequency,\n                false\n            );\n\n            // Schedule periodic hash table cleanup\n            this._hashHandler = this._renderer.scheduler.repeat(\n                () =>\n                {\n                    for (const hash of this._managedHashes)\n                    {\n                        hash.context[hash.hash] = cleanHash(hash.context[hash.hash]);\n                    }\n                },\n                this._frequency\n            );\n\n            // Schedule periodic array cleanup\n            this._arrayHandler = this._renderer.scheduler.repeat(\n                () =>\n                {\n                    for (const array of this._managedArrays)\n                    {\n                        cleanArray(array.context[array.hash]);\n                    }\n                },\n                this._frequency\n            );\n        }\n        else\n        {\n            // Cancel all scheduled cleanups\n            this._renderer.scheduler.cancel(this._handler);\n            this._renderer.scheduler.cancel(this._hashHandler);\n            this._renderer.scheduler.cancel(this._arrayHandler);\n        }\n    }\n\n    /**\n     * Adds a hash table to be managed by the garbage collector.\n     * @param context - The object containing the hash table\n     * @param hash - The property name of the hash table\n     */\n    public addManagedHash<T>(context: T, hash: string): void\n    {\n        this._managedHashes.push({ context, hash: hash as string });\n    }\n\n    /**\n     * Adds an array to be managed by the garbage collector.\n     * @param context - The object containing the array\n     * @param hash - The property name of the array\n     */\n    public addManagedArray<T>(context: T, hash: string): void\n    {\n        this._managedArrays.push({ context, hash: hash as string });\n    }\n\n    /**\n     * Updates the GC timestamp and tracking before rendering.\n     * @param options - The render options\n     * @param options.container - The container to render\n     */\n    public prerender({\n        container\n    }: RenderOptions): void\n    {\n        this._now = performance.now();\n\n        // The gcTick is a monotonically increasing counter that tracks render cycles\n        // Each time we render, we increment the global renderableGCTick counter\n        // and assign the new tick value to the render group being rendered.\n        // This lets us know which render groups were rendered in the current frame\n        // versus ones that haven't been rendered recently.\n        // The instruction set also gets updated with this tick value to track\n        // when its renderables were last used.\n        container.renderGroup.gcTick = renderableGCTick++;\n\n        this._updateInstructionGCTick(container.renderGroup, container.renderGroup.gcTick);\n    }\n\n    /**\n     * Starts tracking a renderable for garbage collection.\n     * @param renderable - The renderable to track\n     */\n    public addRenderable(renderable: Renderable): void\n    {\n        if (!this.enabled) return;\n\n        if (renderable._lastUsed === -1)\n        {\n            this._managedRenderables.push(renderable);\n            renderable.once('destroyed', this._removeRenderable, this);\n        }\n\n        renderable._lastUsed = this._now;\n    }\n\n    /**\n     * Performs garbage collection by cleaning up unused renderables.\n     * Removes renderables that haven't been used for longer than maxUnusedTime.\n     */\n    public run(): void\n    {\n        const now = this._now;\n        const managedRenderables = this._managedRenderables;\n        const renderPipes = this._renderer.renderPipes;\n        let offset = 0;\n\n        for (let i = 0; i < managedRenderables.length; i++)\n        {\n            const renderable = managedRenderables[i];\n\n            if (renderable === null)\n            {\n                offset++;\n                continue;\n            }\n\n            const renderGroup = renderable.renderGroup ?? renderable.parentRenderGroup;\n            const currentTick = renderGroup?.instructionSet?.gcTick ?? -1;\n\n            // Update last used time if the renderable's group was rendered this tick\n            if ((renderGroup?.gcTick ?? 0) === currentTick)\n            {\n                renderable._lastUsed = now;\n            }\n\n            // Clean up if unused for too long\n            if (now - renderable._lastUsed > this.maxUnusedTime)\n            {\n                if (!renderable.destroyed)\n                {\n                    const rp = renderPipes as unknown as Record<string, RenderPipe>;\n\n                    if (renderGroup)renderGroup.structureDidChange = true;\n\n                    rp[renderable.renderPipeId].destroyRenderable(renderable);\n                }\n\n                renderable._lastUsed = -1;\n                offset++;\n                renderable.off('destroyed', this._removeRenderable, this);\n            }\n            else\n            {\n                managedRenderables[i - (offset)] = renderable;\n            }\n        }\n\n        managedRenderables.length -= offset;\n    }\n\n    /** Cleans up the garbage collection system. Disables GC and removes all tracked resources. */\n    public destroy(): void\n    {\n        this.enabled = false;\n        this._renderer = null as any as Renderer;\n        this._managedRenderables.length = 0;\n        this._managedHashes.length = 0;\n        this._managedArrays.length = 0;\n    }\n\n    /**\n     * Removes a renderable from being tracked when it's destroyed.\n     * @param renderable - The renderable to stop tracking\n     */\n    private _removeRenderable(renderable: Container): void\n    {\n        const index = this._managedRenderables.indexOf(renderable as Renderable);\n\n        if (index >= 0)\n        {\n            renderable.off('destroyed', this._removeRenderable, this);\n            this._managedRenderables[index] = null;\n        }\n    }\n\n    /**\n     * Updates the GC tick counter for a render group and its children.\n     * @param renderGroup - The render group to update\n     * @param gcTick - The new tick value\n     */\n    private _updateInstructionGCTick(renderGroup: RenderGroup, gcTick: number): void\n    {\n        renderGroup.instructionSet.gcTick = gcTick;\n\n        for (const child of renderGroup.renderGroupChildren)\n        {\n            this._updateInstructionGCTick(child, gcTick);\n        }\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\n\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\n\n/**\n * Options for the {@link TextureGCSystem}.\n * @memberof rendering\n * @property {boolean} [textureGCActive=true] - If set to true, this will enable the garbage collector on the GPU.\n * @property {number} [textureGCAMaxIdle=60 * 60] -\n * The maximum idle frames before a texture is destroyed by garbage collection.\n * @property {number} [textureGCCheckCountMax=600] - Frames between two garbage collections.\n */\nexport interface TextureGCSystemOptions\n{\n    /**\n     * If set to true, this will enable the garbage collector on the GPU.\n     * @default true\n     * @memberof rendering.SharedRendererOptions\n     */\n    textureGCActive: boolean;\n    /**\n     * @deprecated since 8.3.0\n     * @see {@link TextureGCSystem.textureGCMaxIdle}\n     * @memberof rendering.SharedRendererOptions\n     */\n    textureGCAMaxIdle: number;\n    /**\n     * The maximum idle frames before a texture is destroyed by garbage collection.\n     * @default 60 * 60\n     * @memberof rendering.SharedRendererOptions\n     */\n    textureGCMaxIdle: number;\n    /**\n     * Frames between two garbage collections.\n     * @default 600\n     * @memberof rendering.SharedRendererOptions\n     */\n    textureGCCheckCountMax: number;\n}\n/**\n * System plugin to the renderer to manage texture garbage collection on the GPU,\n * ensuring that it does not get clogged up with textures that are no longer being used.\n * @memberof rendering\n */\nexport class TextureGCSystem implements System<TextureGCSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'textureGC',\n    } as const;\n\n    /** default options for the TextureGCSystem */\n    public static defaultOptions: TextureGCSystemOptions = {\n        /**\n         * If set to true, this will enable the garbage collector on the GPU.\n         * @default true\n         */\n        textureGCActive: true,\n        /**\n         * @deprecated since 8.3.0\n         * @see {@link TextureGCSystem.textureGCMaxIdle}\n         */\n        textureGCAMaxIdle: null,\n        /**\n         * The maximum idle frames before a texture is destroyed by garbage collection.\n         * @default 60 * 60\n         */\n        textureGCMaxIdle: 60 * 60,\n        /**\n         * Frames between two garbage collections.\n         * @default 600\n         */\n        textureGCCheckCountMax: 600,\n    };\n\n    /**\n     * Frame count since started.\n     * @readonly\n     */\n    public count: number;\n\n    /**\n     * Frame count since last garbage collection.\n     * @readonly\n     */\n    public checkCount: number;\n\n    /**\n     * Maximum idle frames before a texture is destroyed by garbage collection.\n     * @see TextureGCSystem.defaultMaxIdle\n     */\n    public maxIdle: number;\n\n    /**\n     * Frames between two garbage collections.\n     * @see TextureGCSystem.defaultCheckCountMax\n     */\n    public checkCountMax: number;\n\n    /**\n     * Current garbage collection mode.\n     * @see TextureGCSystem.defaultMode\n     */\n    public active: boolean;\n    private _renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n\n        this.count = 0;\n        this.checkCount = 0;\n    }\n\n    public init(options: TextureGCSystemOptions): void\n    {\n        options = { ...TextureGCSystem.defaultOptions, ...options };\n\n        this.checkCountMax = options.textureGCCheckCountMax;\n        this.maxIdle = options.textureGCAMaxIdle ?? options.textureGCMaxIdle;\n        this.active = options.textureGCActive;\n    }\n\n    /**\n     * Checks to see when the last time a texture was used.\n     * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n     */\n    protected postrender(): void\n    {\n        if (!this._renderer.renderingToScreen)\n        {\n            return;\n        }\n\n        this.count++;\n\n        if (!this.active) return;\n\n        this.checkCount++;\n\n        if (this.checkCount > this.checkCountMax)\n        {\n            this.checkCount = 0;\n\n            this.run();\n        }\n    }\n\n    /**\n     * Checks to see when the last time a texture was used.\n     * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n     */\n    public run(): void\n    {\n        const managedTextures = this._renderer.texture.managedTextures;\n\n        for (let i = 0; i < managedTextures.length; i++)\n        {\n            const texture = managedTextures[i];\n\n            // Only supports non generated textures at the moment!\n            if (\n                texture.autoGarbageCollect\n                && texture.resource\n                && texture._touched > -1\n                && this.count - texture._touched > this.maxIdle\n            )\n            {\n                texture._touched = -1;\n                texture.unload();\n            }\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null as any as Renderer;\n    }\n}\n","import { DOMAdapter } from '../../../../environment/adapter';\nimport { ExtensionType } from '../../../../extensions/Extensions';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation';\nimport { RenderTarget } from '../renderTarget/RenderTarget';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture';\n\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { TypeOrBool } from '../../../../scene/container/destroyTypes';\nimport type { System } from '../system/System';\nimport type { CanvasSource } from '../texture/sources/CanvasSource';\nimport type { Texture } from '../texture/Texture';\n\n/**\n * Options passed to the ViewSystem\n * @memberof rendering\n * @property {number} [width=800] - The width of the screen.\n * @property {number} [height=600] - The height of the screen.\n * @property {ICanvas} [canvas] - The canvas to use as a view, optional.\n * @property {boolean} [autoDensity=false] - Resizes renderer view in CSS pixels to allow for resolutions other than 1.\n *  This is only supported for HTMLCanvasElement and will be ignored if the canvas is an OffscreenCanvas.\n * @property {number} [resolution] - The resolution / device pixel ratio of the renderer.\n * @property {boolean} [antialias=false] - Whether to enable anti-aliasing. This may affect performance.\n * @property {boolean} [depth] -\n * Whether to ensure the main view has can make use of the depth buffer. Always true for WebGL renderer.\n * @property {boolean} [multiView] - TODO: multiView\n * @property {number} [backgroundAlpha] - The alpha of the background.\n */\nexport interface ViewSystemOptions\n{\n    /**\n     * The width of the screen.\n     * @default 800\n     * @memberof rendering.SharedRendererOptions\n     */\n    width?: number;\n    /**\n     * The height of the screen.\n     * @default 600\n     * @memberof rendering.SharedRendererOptions\n     */\n    height?: number;\n    /**\n     * The canvas to use as a view, optional.\n     * @memberof rendering.SharedRendererOptions\n     */\n    canvas?: ICanvas;\n    /** @deprecated */\n    view?: ICanvas;\n    /**\n     * Resizes renderer view in CSS pixels to allow for resolutions other than 1.\n     *\n     * This is only supported for HTMLCanvasElement\n     * and will be ignored if the canvas is an OffscreenCanvas.\n     * @memberof rendering.SharedRendererOptions\n     */\n    autoDensity?: boolean;\n    /**\n     * The resolution / device pixel ratio of the renderer.\n     * @memberof rendering.SharedRendererOptions\n     */\n    resolution?: number;\n    /**\n     * Whether to enable anti-aliasing. This may affect performance.\n     * @memberof rendering.SharedRendererOptions\n     */\n    antialias?: boolean;\n    /**\n     * Whether to ensure the main view has can make use of the depth buffer. Always true for WebGL renderer.\n     * @memberof rendering.SharedRendererOptions\n     */\n    depth?: boolean;\n\n    /**\n     * Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n     * @default 1\n     */\n    backgroundAlpha?: number;\n}\n\nexport interface ViewSystemDestroyOptions\n{\n    /** Whether to remove the view element from the DOM. Defaults to `false`. */\n    removeView?: boolean;\n}\n\n/**\n * The view system manages the main canvas that is attached to the DOM.\n * This main role is to deal with how the holding the view reference and dealing with how it is resized.\n * @memberof rendering\n */\nexport class ViewSystem implements System<ViewSystemOptions, TypeOrBool<ViewSystemDestroyOptions>>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'view',\n        priority: 0,\n    } as const;\n\n    /** The default options for the view system. */\n    public static defaultOptions: ViewSystemOptions = {\n        /**\n         * {@link WebGLOptions.width}\n         * @default 800\n         */\n        width: 800,\n        /**\n         * {@link WebGLOptions.height}\n         * @default 600\n         */\n        height: 600,\n        /**\n         * {@link WebGLOptions.autoDensity}\n         * @default false\n         */\n        autoDensity: false,\n        /**\n         * {@link WebGLOptions.antialias}\n         * @default false\n         */\n        antialias: false,\n    };\n\n    /** The canvas element that everything is drawn to. */\n    public canvas!: ICanvas;\n\n    /** The texture that is used to draw the canvas to the screen. */\n    public texture: Texture<CanvasSource>;\n\n    /**\n     * Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.\n     * This is only supported for HTMLCanvasElement and will be ignored if the canvas is an OffscreenCanvas.\n     * @member {boolean}\n     */\n    public get autoDensity(): boolean\n    {\n        return this.texture.source.autoDensity;\n    }\n    public set autoDensity(value: boolean)\n    {\n        this.texture.source.autoDensity = value;\n    }\n\n    /** Whether to enable anti-aliasing. This may affect performance. */\n    public antialias: boolean;\n\n    /**\n     * Measurements of the screen. (0, 0, screenWidth, screenHeight).\n     *\n     * Its safe to use as filterArea or hitArea for the whole stage.\n     */\n    public screen: Rectangle;\n    /** The render target that the view is drawn to. */\n    public renderTarget: RenderTarget;\n\n    /** The resolution / device pixel ratio of the renderer. */\n    get resolution(): number\n    {\n        return this.texture.source._resolution;\n    }\n\n    set resolution(value: number)\n    {\n        this.texture.source.resize(\n            this.texture.source.width,\n            this.texture.source.height,\n            value\n        );\n    }\n\n    /**\n     * initiates the view system\n     * @param options - the options for the view\n     */\n    public init(options: ViewSystemOptions): void\n    {\n        options = {\n            ...ViewSystem.defaultOptions,\n            ...options,\n        };\n\n        if (options.view)\n        {\n            // #if _DEBUG\n            deprecation(v8_0_0, 'ViewSystem.view has been renamed to ViewSystem.canvas');\n            // #endif\n\n            options.canvas = options.view;\n        }\n\n        this.screen = new Rectangle(0, 0, options.width, options.height);\n        this.canvas = options.canvas || DOMAdapter.get().createCanvas();\n        this.antialias = !!options.antialias;\n        this.texture = getCanvasTexture(this.canvas, options);\n        this.renderTarget = new RenderTarget({\n            colorTextures: [this.texture],\n            depth: !!options.depth,\n            isRoot: true,\n        });\n\n        this.texture.source.transparent = options.backgroundAlpha < 1;\n        this.resolution = options.resolution;\n    }\n\n    /**\n     * Resizes the screen and canvas to the specified dimensions.\n     * @param desiredScreenWidth - The new width of the screen.\n     * @param desiredScreenHeight - The new height of the screen.\n     * @param resolution\n     */\n    public resize(desiredScreenWidth: number, desiredScreenHeight: number, resolution: number): void\n    {\n        this.texture.source.resize(desiredScreenWidth, desiredScreenHeight, resolution);\n\n        this.screen.width = this.texture.frame.width;\n        this.screen.height = this.texture.frame.height;\n    }\n\n    /**\n     * Destroys this System and optionally removes the canvas from the dom.\n     * @param {options | false} options - The options for destroying the view, or \"false\".\n     * @param options.removeView - Whether to remove the view element from the DOM. Defaults to `false`.\n     */\n    public destroy(options: TypeOrBool<ViewSystemDestroyOptions> = false): void\n    {\n        const removeView = typeof options === 'boolean' ? options : !!options?.removeView;\n\n        if (removeView && this.canvas.parentNode)\n        {\n            this.canvas.parentNode.removeChild(this.canvas);\n        }\n\n        // note: don't nullify the element\n        //       other systems may need to unbind from it during the destroy iteration (eg. GLContextSystem)\n    }\n}\n","import { CustomRenderPipe } from '../../../../scene/container/CustomRenderPipe';\nimport { RenderGroupPipe } from '../../../../scene/container/RenderGroupPipe';\nimport { RenderGroupSystem } from '../../../../scene/container/RenderGroupSystem';\nimport { SpritePipe } from '../../../../scene/sprite/SpritePipe';\nimport { RendererInitHook } from '../../../../utils/global/globalHooks';\nimport { BatcherPipe } from '../../../batcher/shared/BatcherPipe';\nimport { AlphaMaskPipe } from '../../../mask/alpha/AlphaMaskPipe';\nimport { ColorMaskPipe } from '../../../mask/color/ColorMaskPipe';\nimport { StencilMaskPipe } from '../../../mask/stencil/StencilMaskPipe';\nimport { BackgroundSystem } from '../background/BackgroundSystem';\nimport { BlendModePipe } from '../blendModes/BlendModePipe';\nimport { ExtractSystem } from '../extract/ExtractSystem';\nimport { GenerateTextureSystem } from '../extract/GenerateTextureSystem';\nimport { GlobalUniformSystem } from '../renderTarget/GlobalUniformSystem';\nimport { SchedulerSystem } from '../SchedulerSystem';\nimport { HelloSystem } from '../startup/HelloSystem';\nimport { RenderableGCSystem } from '../texture/RenderableGCSystem';\nimport { TextureGCSystem } from '../texture/TextureGCSystem';\nimport { ViewSystem } from '../view/ViewSystem';\n\nimport type { ExtractRendererOptions } from './utils/typeUtils';\n\nexport const SharedSystems = [\n    BackgroundSystem,\n    GlobalUniformSystem,\n    HelloSystem,\n    ViewSystem,\n    RenderGroupSystem,\n    TextureGCSystem,\n    GenerateTextureSystem,\n    ExtractSystem,\n    RendererInitHook,\n    RenderableGCSystem,\n    SchedulerSystem,\n];\n\nexport const SharedRenderPipes = [\n    BlendModePipe,\n    BatcherPipe,\n    SpritePipe,\n    RenderGroupPipe,\n    AlphaMaskPipe,\n    StencilMaskPipe,\n    ColorMaskPipe,\n    CustomRenderPipe\n];\n\n/**\n * Options for the shared systems of a renderer.\n * @memberof rendering\n */\nexport interface SharedRendererOptions extends ExtractRendererOptions<typeof SharedSystems>, PixiMixins.RendererOptions\n{\n    /**\n     * Whether to stop PixiJS from dynamically importing default extensions for the renderer.\n     * It is false by default, and means PixiJS will load all the default extensions, based\n     * on the environment e.g browser/webworker.\n     * If you set this to true, then you will need to manually import the systems and extensions you need.\n     *\n     * e.g.\n     * ```js\n     * import 'accessibility';\n     * import 'app';\n     * import 'events';\n     * import 'spritesheet';\n     * import 'graphics';\n     * import 'mesh';\n     * import 'text';\n     * import 'text-bitmap';\n     * import 'text-html';\n     * import { autoDetectRenderer } from 'pixi.js';\n     *\n     * const renderer = await autoDetectRenderer({\n     *   width: 800,\n     *   height: 600,\n     *   skipExtensionImports: true,\n     * });\n     * ```\n     * @default false\n     */\n    skipExtensionImports?: boolean;\n    /**\n     * @default true\n     * @deprecated since 8.1.6\n     * @see `skipExtensionImports`\n     */\n    manageImports?: boolean;\n}\n"],"names":["_RenderTarget","constructor","descriptor","arguments","length","undefined","uid","colorTextures","dirtyId","isRoot","_size","Float32Array","_managedColorTextures","defaultOptions","this","stencil","depth","i","push","TextureSource","width","height","resolution","antialias","map","texture","source","colorSource","colorTexture","resize","_resolution","on","onSourceResize","depthStencilTexture","Texture","ensureDepthStencilTexture","size","pixelWidth","pixelHeight","format","autoGenerateMipmaps","mipLevelCount","skipColorTexture","forEach","destroy","off","RenderTarget","localUniformBit","name","vertex","header","main","end","localUniformBitGroup2","replace","localUniformBitGl","BatchableSprite","batcherName","topology","attributeSize","indexSize","packAsQuad","roundPixels","_attributeStart","_batcher","_batch","blendMode","renderable","groupBlendMode","color","groupColorAlpha","reset","bounds","textureBit","fragment","textureBitGl","ensureAttributes","geometry","extractedData","attributes","attribute","attributeData","offset","instance","warn","buffers","tempStride","tempStart","j","buffer","getAttributeInfoFromFormat","stride","start","ensureStartAndStride","canvasCache","Map","getCanvasTexture","canvas","options","has","CanvasSource","resource","onDestroy","get","delete","once","set","loopMatrix","col","row","uboSyncFunctionsSTD40","f32","i32","uboSyncFunctionsWGSL","GpuStencilModesToPixi","STENCIL_MODES","NONE","DISABLED","stencilWriteMask","stencilReadMask","RENDERING_MASK_ADD","stencilFront","compare","passOp","stencilBack","RENDERING_MASK_REMOVE","MASK_ACTIVE","INVERSE_MASK_ACTIVE","RenderTargetSystem","renderer","rootViewPort","Rectangle","viewport","onRenderTargetChange","SystemRunner","projectionMatrix","Matrix","defaultClearColor","_renderSurfaceToRenderTargetHash","_gpuRenderTargetHash","Object","create","_renderTargetStack","_renderer","renderableGC","addManagedHash","finishRenderPass","adaptor","renderTarget","renderStart","_ref","target","clear","clearColor","frame","copyFrom","rootRenderTarget","renderingToScreen","globalThis","HTMLCanvasElement","document","body","contains","isRenderingToScreen","prerender","postrender","bind","renderSurface","getRenderTarget","didChange","gpuRenderTarget","getGpuRenderTarget","resizeGpuRenderTarget","x","y","pm","flipY","sign","identity","a","d","tx","ty","calculateProjection","startRenderPass","emit","CLEAR","ALL","contextChange","pop","currentRenderTargetData","isTexture","_initRenderTarget","copyToTexture","sourceRenderSurfaceTexture","destinationTexture","originSrc","originDest","Math","min","ensureDepthStencil","key","test","destroyGpuRenderTarget","initGpuRenderTarget","resetState","createUboSyncFunction","uboElements","parserCode","arrayGenerationFunction","singleSettersMap","funcFragments","prev","uboElement","data","parsed","uniformParsers","ubo","template","type","fragmentSrc","join","Function","value","uniform","red","UboSystem","_syncFunctionHash","_adaptor","_systemCheck","unsafeEvalSupported","Error","ensureUniformGroup","uniformGroup","uniformData","getUniformGroupData","Buffer","layout","usage","BufferUsage","UNIFORM","COPY_DST","_signature","_initUniformGroup","uniformGroupSignature","elements","keys","uniformStructures","createUboElements","syncFunction","_generateUboSync","generateUboSync","syncUniformGroup","uniformGroupData","dataInt32","uniforms","updateUniformGroup","isStatic","_dirtyId","synced","update","color32BitToUniform","abgr","out","alpha","BufferResource","EventEmitter","_resourceType","_touched","_resourceId","_bufferResource","destroyed","onBufferChange","destroyBuffer","CustomRenderPipe","updateRenderable","destroyRenderable","validateRenderable","addRenderable","container","instructionSet","renderPipes","batch","break","add","execute","isRenderable","render","extension","ExtensionType","WebGLPipes","WebGPUPipes","CanvasPipes","executeInstructions","renderGroup","instructions","instructionSize","instruction","renderPipeId","tempMatrix","RenderGroupPipe","addRenderGroup","isCachedAsTexture","_addRenderableCacheAsTexture","_addRenderableDirect","_executeCacheAsTexture","_executeDirect","_batchableRenderGroup","BigPool","return","batchableRenderGroup","root","transform","relativeGroupTransform","_textureBounds","addToBatch","textureNeedsUpdate","worldTransformMatrix","translate","globalUniforms","worldColor","updateElement","inverseParentTextureTransform","worldColorAlpha","clearList","list","index","tempContainer","Container","UPDATE_BLEND_COLOR_VISIBLE","UPDATE_VISIBLE","UPDATE_COLOR","UPDATE_BLEND","updateRenderGroupTransforms","updateChildRenderGroups","worldAlpha","renderGroupParent","worldTransform","appendFrom","multiplyColors","groupColor","groupAlpha","localTransform","localColor","localAlpha","updateRenderGroupTransform","childrenToUpdate","updateTick","renderGroupDepth","Number","childrenAtDepth","child","parentRenderGroup","relativeRenderGroupDepth","updateTransformAndChildren","renderGroupChildren","updateFlags","updateLocalTransform","parent","_updateFlags","updateColorBlendVisibility","children","structureDidChange","localBlendMode","globalDisplayStatus","localDisplayStatus","RenderGroupSystem","originalLocalTransform","_updateCachedRenderGroups","_updateRenderGroups","uniformBatch","renderEnd","closestCacheAsTexture","updateCacheTexture","_parentCacheAsTextureRenderGroup","invalidateMatrices","getLocalBounds","ceil","lastTexture","TexturePool","returnTexture","textureOptions","view","getOptimalTexture","Bounds","runOnRender","childrenRenderablesToUpdate","rebuildRequired","validateRenderables","_buildInstructions","_updateRenderables","upload","didViewUpdate","rendererOrPipes","buildStart","colorMask","sortableChildren","sortChildren","collectRenderablesWithEffects","buildEnd","WebGLSystem","WebGPUSystem","CanvasSystem","SpritePipe","_gpuSpriteHash","_destroyRenderableBound","sprite","gpuSprite","_getGpuSprite","_updateBatchableSprite","checkAndUpdateTexture","_texture","batchableSprite","visualBounds","_initGPUSprite","groupTransform","_roundPixels","_BatcherPipe","state","State","for2d","_batchersByInstructionSet","_activeBatches","init","getBatcher","_availableBatchers","batchers","default","DefaultBatcher","_activeBatch","begin","batchableObject","batches","indexBuffer","setDataWithSize","attributeBuffer","float32View","batcher","dirty","action","shader","BatcherPipe","extensions","handleByMap","Batcher","MaskFilter","Filter","rest","textureMatrix","TextureMatrix","filterUniforms","UniformGroup","uFilterMatrix","uMaskClamp","uClampFrame","uAlpha","uInverse","inverse","gpuProgram","GpuProgram","from","entryPoint","glProgram","GlProgram","resources","uMaskTexture","_textureMatrix","apply","filterManager","input","output","clearMode","calculateSpriteMatrix","prepend","mapCoord","applyFilter","tempBounds","AlphaMaskEffect","FilterEffect","filters","Sprite","EMPTY","AlphaMaskPipe","_activeMaskStage","mask","maskedContainer","_maskOptions","canBundle","renderMaskToTexture","maskContainer","includeInBuild","collectRenderables","_maskedContainer","renderMask","filterEffect","measurable","getGlobalBounds","colorTextureSource","filterTexture","minX","minY","maskData","RendererType","WEBGL","filter","ColorMaskPipe","_colorStack","_colorStackIndex","_currentColor","_container","colorStack","currentColor","_mask","setMask","StencilMaskPipe","_maskStackHash","_maskHash","WeakMap","_a","effect","setBlendMode","instructionsStart","instructionsLength","renderTargetUid","maskStackIndex","setStencilMode","STENCIL","_BackgroundSystem","clearBeforeRender","_backgroundColor","Color","background","backgroundColor","backgroundAlpha","setAlpha","setValue","colorRgba","toArray","priority","BackgroundSystem","BLEND_MODE_FILTERS","handle","BlendMode","ref","BlendModePipe","_isAdvanced","_filterHash","runners","_activeBlendMode","_endAdvancedBlendMode","_beginAdvancedBlendMode","_renderableList","renderables","imageTypes","png","jpg","webp","_ExtractSystem","_normalizeOptions","defaults","image","Image","src","base64","defaultImageOptions","quality","toBlob","Promise","resolve","reject","blob","reader","FileReader","onload","result","onerror","readAsDataURL","toDataURL","convertToBlob","generateCanvas","textureGenerator","generateTexture","pixels","pixelInfo","getPixels","download","link","createElement","filename","href","appendChild","click","removeChild","log","console","style","ExtractSystem","RenderTexture","tempRect","noColor","GenerateTextureSystem","textureSourceOptions","Array","isArray","shared","region","copyTo","rectangle","max","updateMipmaps","GlobalUniformSystem","_stackIndex","_globalUniformDataStack","_uniformsPool","_activeUniforms","_bindGroupPool","_activeBindGroups","currentGlobalUniformData","projectionData","Point","globalUniformData","bindGroup","_createUniforms","uProjectionMatrix","uResolution","uWorldTransformMatrix","uWorldColorAlpha","getUniformBindGroup","BindGroup","setResource","_currentGlobalUniformData","SchedulerSystem","_tasks","_offset","Ticker","system","_update","repeat","func","duration","id","performance","now","last","cancel","splice","task","elapsed","remove","saidHello","HelloSystem","hello","context","webGLVersion","DOMAdapter","getNavigator","userAgent","toLowerCase","indexOf","args","VERSION","sayHello","cleanHash","hash","clean","cleanHash2","cleanArray","arr","renderableGCTick","_RenderableGCSystem","_managedRenderables","_managedHashes","_managedArrays","maxUnusedTime","renderableGCMaxUnusedTime","_frequency","renderableGCFrequency","enabled","renderableGCActive","_handler","scheduler","run","_hashHandler","_arrayHandler","array","addManagedArray","_now","gcTick","_updateInstructionGCTick","_lastUsed","_removeRenderable","managedRenderables","currentTick","rp","RenderableGCSystem","_TextureGCSystem","count","checkCount","checkCountMax","textureGCCheckCountMax","maxIdle","textureGCAMaxIdle","textureGCMaxIdle","active","textureGCActive","managedTextures","autoGarbageCollect","unload","TextureGCSystem","_ViewSystem","autoDensity","deprecation","v8_0_0","screen","createCanvas","transparent","desiredScreenWidth","desiredScreenHeight","removeView","parentNode","SharedSystems","RendererInitHook","SharedRenderPipes"],"sourceRoot":""}